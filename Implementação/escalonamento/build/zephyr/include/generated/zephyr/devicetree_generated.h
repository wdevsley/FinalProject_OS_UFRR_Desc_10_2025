/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/luciano/zephyrproject/zephyr/samples/escalonamento/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /eeprom0
 *   4   /sim_flash
 *   5   /sim_flash/flash_sim@0
 *   6   /sim_flash/flash_sim@0/partitions
 *   7   /sim_flash/flash_sim@0/partitions/partition@31000
 *   8   /eeprom1
 *   9   /flash@500000
 *   10  /ieee802154
 *   11  /loapic@fee00000
 *   12  /memory@0
 *   13  /cpus
 *   14  /cpus/cpu@0
 *   15  /ioapic@fec00000
 *   16  /pcie0
 *   17  /pcie0/eth0
 *   18  /pcie0/can0
 *   19  /pcie0/can0/can-transceiver
 *   20  /sim_flash/flash_sim@0/partitions/partition@1000
 *   21  /sim_flash/flash_sim@0/partitions/partition@11000
 *   22  /sim_flash/flash_sim@0/partitions/partition@21000
 *   23  /soc
 *   24  /soc/hpet@fed00000
 *   25  /soc/rtc@70
 *   26  /soc/uart@3f8
 *   27  /soc/uart@2f8
 *   28  /soc/uart@2f8/bt_hci_uart
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FULL_NAME_UNQUOTED /
#define DT_N_FULL_NAME_TOKEN _
#define DT_N_FULL_NAME_UPPER_TOKEN _

/* Helpers for dealing with node labels: */
#define DT_N_NODELABEL_NUM 0
#define DT_N_FOREACH_NODELABEL(fn) 
#define DT_N_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_FOREACH_ANCESTOR(fn) 

/* Helper macros for child nodes of this node. */
#define DT_N_CHILD_NUM 13
#define DT_N_CHILD_NUM_STATUS_OKAY 13
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_ioapic_fec00000) fn(DT_N_S_loapic_fee00000) fn(DT_N_S_memory_0) fn(DT_N_S_soc) fn(DT_N_S_flash_500000) fn(DT_N_S_pcie0) fn(DT_N_S_sim_flash) fn(DT_N_S_eeprom1) fn(DT_N_S_eeprom0) fn(DT_N_S_ieee802154)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ioapic_fec00000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_loapic_fee00000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_500000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ieee802154)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) fn(DT_N_S_loapic_fee00000, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_flash_500000, __VA_ARGS__) fn(DT_N_S_pcie0, __VA_ARGS__) fn(DT_N_S_sim_flash, __VA_ARGS__) fn(DT_N_S_eeprom1, __VA_ARGS__) fn(DT_N_S_eeprom0, __VA_ARGS__) fn(DT_N_S_ieee802154, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_loapic_fee00000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_500000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ieee802154, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_ioapic_fec00000) fn(DT_N_S_loapic_fee00000) fn(DT_N_S_memory_0) fn(DT_N_S_soc) fn(DT_N_S_flash_500000) fn(DT_N_S_pcie0) fn(DT_N_S_sim_flash) fn(DT_N_S_eeprom1) fn(DT_N_S_eeprom0) fn(DT_N_S_ieee802154)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ioapic_fec00000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_loapic_fee00000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_500000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom1) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ieee802154)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) fn(DT_N_S_loapic_fee00000, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_flash_500000, __VA_ARGS__) fn(DT_N_S_pcie0, __VA_ARGS__) fn(DT_N_S_sim_flash, __VA_ARGS__) fn(DT_N_S_eeprom1, __VA_ARGS__) fn(DT_N_S_eeprom0, __VA_ARGS__) fn(DT_N_S_ieee802154, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_aliases, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_loapic_fee00000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_flash_500000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_eeprom0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_ieee802154, __VA_ARGS__)

/* Node's hash: */
#define DT_N_HASH il7asoJjJEMhngUeSt4tHVu8Zxx4EFG_FDeJfL3_oPE

/* Node's dependency ordinal: */
#define DT_N_ORD 0
#define DT_N_ORD_STR_SORTABLE 00000

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /eeprom0 */ \
	4, /* /sim_flash */ \
	8, /* /eeprom1 */ \
	9, /* /flash@500000 */ \
	10, /* /ieee802154 */ \
	11, /* /loapic@fee00000 */ \
	12, /* /memory@0 */ \
	13, /* /cpus */ \
	15, /* /ioapic@fec00000 */ \
	16, /* /pcie0 */ \
	23, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_qemu_x86_emulator DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_IRQ_LEVEL 0
#define DT_N_COMPAT_MATCHES_qemu_x86_emulator 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "QEMU, a generic and open source machine emulator and virtualizer"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "x86_emulator"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"qemu,x86_emulator"}
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_IDX_0 "qemu,x86_emulator"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED qemu,x86_emulator
#define DT_N_P_compatible_IDX_0_STRING_TOKEN qemu_x86_emulator
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN QEMU_X86_EMULATOR
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"
#define DT_N_S_aliases_FULL_NAME_UNQUOTED aliases
#define DT_N_S_aliases_FULL_NAME_TOKEN aliases
#define DT_N_S_aliases_FULL_NAME_UPPER_TOKEN ALIASES

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_aliases_NODELABEL_NUM 0
#define DT_N_S_aliases_FOREACH_NODELABEL(fn) 
#define DT_N_S_aliases_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_aliases_CHILD_NUM 0
#define DT_N_S_aliases_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_aliases_HASH QavYY6yplHKhLPRKsRzaLCGlR0CWZ0JUNJakcBCfDXA

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1
#define DT_N_S_aliases_ORD_STR_SORTABLE 00001

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_IRQ_LEVEL 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"
#define DT_N_S_chosen_FULL_NAME_UNQUOTED chosen
#define DT_N_S_chosen_FULL_NAME_TOKEN chosen
#define DT_N_S_chosen_FULL_NAME_UPPER_TOKEN CHOSEN

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_chosen_NODELABEL_NUM 0
#define DT_N_S_chosen_FOREACH_NODELABEL(fn) 
#define DT_N_S_chosen_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_CHILD_NUM 0
#define DT_N_S_chosen_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_chosen_HASH qNExeeLInzqaWpm1KroyYDk4lRIxVO2ig78mq_hOnA8

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2
#define DT_N_S_chosen_ORD_STR_SORTABLE 00002

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_IRQ_LEVEL 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /eeprom0
 *
 * Node identifier: DT_N_S_eeprom0
 *
 * Binding (compatible = zephyr,sim-eeprom):
 *   $ZEPHYR_BASE/dts/bindings/mtd/zephyr,sim-eeprom.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_eeprom0_PATH "/eeprom0"

/* Node's name with unit-address: */
#define DT_N_S_eeprom0_FULL_NAME "eeprom0"
#define DT_N_S_eeprom0_FULL_NAME_UNQUOTED eeprom0
#define DT_N_S_eeprom0_FULL_NAME_TOKEN eeprom0
#define DT_N_S_eeprom0_FULL_NAME_UPPER_TOKEN EEPROM0

/* Node parent (/) identifier: */
#define DT_N_S_eeprom0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_eeprom0_CHILD_IDX 11

/* Helpers for dealing with node labels: */
#define DT_N_S_eeprom0_NODELABEL_NUM 1
#define DT_N_S_eeprom0_FOREACH_NODELABEL(fn) fn(eeprom0)
#define DT_N_S_eeprom0_FOREACH_NODELABEL_VARGS(fn, ...) fn(eeprom0, __VA_ARGS__)
#define DT_N_S_eeprom0_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_eeprom0_CHILD_NUM 0
#define DT_N_S_eeprom0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_eeprom0_FOREACH_CHILD(fn) 
#define DT_N_S_eeprom0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_eeprom0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_eeprom0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_eeprom0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_eeprom0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_eeprom0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_eeprom0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_eeprom0_HASH QaAyQUYy9NJW4D9jO6c9FN2A_NnlnEM__qoyvYkfxhQ

/* Node's dependency ordinal: */
#define DT_N_S_eeprom0_ORD 3
#define DT_N_S_eeprom0_ORD_STR_SORTABLE 00003

/* Ordinals for what this node depends on directly: */
#define DT_N_S_eeprom0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_eeprom0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_eeprom0_EXISTS 1
#define DT_N_ALIAS_eeprom_0           DT_N_S_eeprom0
#define DT_N_INST_0_zephyr_sim_eeprom DT_N_S_eeprom0
#define DT_N_NODELABEL_eeprom0        DT_N_S_eeprom0

/* Macros for properties that are special in the specification: */
#define DT_N_S_eeprom0_REG_NUM 0
#define DT_N_S_eeprom0_RANGES_NUM 0
#define DT_N_S_eeprom0_FOREACH_RANGE(fn) 
#define DT_N_S_eeprom0_IRQ_NUM 0
#define DT_N_S_eeprom0_IRQ_LEVEL 0
#define DT_N_S_eeprom0_COMPAT_MATCHES_zephyr_sim_eeprom 1
#define DT_N_S_eeprom0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_eeprom0_COMPAT_VENDOR_IDX_0 "The Zephyr Project"
#define DT_N_S_eeprom0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_eeprom0_COMPAT_MODEL_IDX_0 "sim-eeprom"
#define DT_N_S_eeprom0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_eeprom0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_eeprom0_P_size 4096
#define DT_N_S_eeprom0_P_size_EXISTS 1
#define DT_N_S_eeprom0_P_read_only 0
#define DT_N_S_eeprom0_P_read_only_EXISTS 1
#define DT_N_S_eeprom0_P_status "okay"
#define DT_N_S_eeprom0_P_status_STRING_UNQUOTED okay
#define DT_N_S_eeprom0_P_status_STRING_TOKEN okay
#define DT_N_S_eeprom0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_eeprom0_P_status_IDX_0 "okay"
#define DT_N_S_eeprom0_P_status_IDX_0_EXISTS 1
#define DT_N_S_eeprom0_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_eeprom0_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_eeprom0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_eeprom0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom0, status, 0)
#define DT_N_S_eeprom0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom0, status, 0)
#define DT_N_S_eeprom0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom0, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom0, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom0_P_status_LEN 1
#define DT_N_S_eeprom0_P_status_EXISTS 1
#define DT_N_S_eeprom0_P_compatible {"zephyr,sim-eeprom"}
#define DT_N_S_eeprom0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_eeprom0_P_compatible_IDX_0 "zephyr,sim-eeprom"
#define DT_N_S_eeprom0_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sim-eeprom
#define DT_N_S_eeprom0_P_compatible_IDX_0_STRING_TOKEN zephyr_sim_eeprom
#define DT_N_S_eeprom0_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SIM_EEPROM
#define DT_N_S_eeprom0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom0, compatible, 0)
#define DT_N_S_eeprom0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom0, compatible, 0)
#define DT_N_S_eeprom0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom0, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom0, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom0_P_compatible_LEN 1
#define DT_N_S_eeprom0_P_compatible_EXISTS 1
#define DT_N_S_eeprom0_P_zephyr_deferred_init 0
#define DT_N_S_eeprom0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_eeprom0_P_wakeup_source 0
#define DT_N_S_eeprom0_P_wakeup_source_EXISTS 1
#define DT_N_S_eeprom0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_eeprom0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /sim_flash
 *
 * Node identifier: DT_N_S_sim_flash
 *
 * Binding (compatible = zephyr,sim-flash):
 *   $ZEPHYR_BASE/dts/bindings/flash_controller/zephyr,sim-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sim_flash_PATH "/sim_flash"

/* Node's name with unit-address: */
#define DT_N_S_sim_flash_FULL_NAME "sim_flash"
#define DT_N_S_sim_flash_FULL_NAME_UNQUOTED sim_flash
#define DT_N_S_sim_flash_FULL_NAME_TOKEN sim_flash
#define DT_N_S_sim_flash_FULL_NAME_UPPER_TOKEN SIM_FLASH

/* Node parent (/) identifier: */
#define DT_N_S_sim_flash_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_sim_flash_CHILD_IDX 9

/* Helpers for dealing with node labels: */
#define DT_N_S_sim_flash_NODELABEL_NUM 1
#define DT_N_S_sim_flash_FOREACH_NODELABEL(fn) fn(sim_flash)
#define DT_N_S_sim_flash_FOREACH_NODELABEL_VARGS(fn, ...) fn(sim_flash, __VA_ARGS__)
#define DT_N_S_sim_flash_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sim_flash_CHILD_NUM 1
#define DT_N_S_sim_flash_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_sim_flash_FOREACH_CHILD(fn) fn(DT_N_S_sim_flash_S_flash_sim_0)
#define DT_N_S_sim_flash_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0)
#define DT_N_S_sim_flash_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0, __VA_ARGS__)
#define DT_N_S_sim_flash_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0, __VA_ARGS__)
#define DT_N_S_sim_flash_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_sim_flash_S_flash_sim_0)
#define DT_N_S_sim_flash_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0)
#define DT_N_S_sim_flash_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0, __VA_ARGS__)
#define DT_N_S_sim_flash_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_sim_flash_HASH 5_uWI5OQhcRB6sIjMCELlG_IFGS64Kf4MOal0Ss5Q40

/* Node's dependency ordinal: */
#define DT_N_S_sim_flash_ORD 4
#define DT_N_S_sim_flash_ORD_STR_SORTABLE 00004

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sim_flash_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sim_flash_SUPPORTS_ORDS \
	5, /* /sim_flash/flash_sim@0 */

/* Existence and alternate IDs: */
#define DT_N_S_sim_flash_EXISTS 1
#define DT_N_INST_0_zephyr_sim_flash DT_N_S_sim_flash
#define DT_N_NODELABEL_sim_flash     DT_N_S_sim_flash

/* Macros for properties that are special in the specification: */
#define DT_N_S_sim_flash_REG_NUM 0
#define DT_N_S_sim_flash_RANGES_NUM 0
#define DT_N_S_sim_flash_FOREACH_RANGE(fn) 
#define DT_N_S_sim_flash_IRQ_NUM 0
#define DT_N_S_sim_flash_IRQ_LEVEL 0
#define DT_N_S_sim_flash_COMPAT_MATCHES_zephyr_sim_flash 1
#define DT_N_S_sim_flash_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_COMPAT_VENDOR_IDX_0 "The Zephyr Project"
#define DT_N_S_sim_flash_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_COMPAT_MODEL_IDX_0 "sim-flash"
#define DT_N_S_sim_flash_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sim_flash_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_sim_flash_P_erase_value 255
#define DT_N_S_sim_flash_P_erase_value_IDX_0_ENUM_IDX 0
#define DT_N_S_sim_flash_P_erase_value_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_P_erase_value_IDX_0_ENUM_VAL_255_EXISTS 1
#define DT_N_S_sim_flash_P_erase_value_ENUM_VAL_255_EXISTS 1
#define DT_N_S_sim_flash_P_erase_value_EXISTS 1
#define DT_N_S_sim_flash_P_compatible {"zephyr,sim-flash"}
#define DT_N_S_sim_flash_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_P_compatible_IDX_0 "zephyr,sim-flash"
#define DT_N_S_sim_flash_P_compatible_IDX_0_STRING_UNQUOTED zephyr,sim-flash
#define DT_N_S_sim_flash_P_compatible_IDX_0_STRING_TOKEN zephyr_sim_flash
#define DT_N_S_sim_flash_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_SIM_FLASH
#define DT_N_S_sim_flash_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sim_flash, compatible, 0)
#define DT_N_S_sim_flash_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sim_flash, compatible, 0)
#define DT_N_S_sim_flash_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sim_flash, compatible, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash, compatible, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_P_compatible_LEN 1
#define DT_N_S_sim_flash_P_compatible_EXISTS 1
#define DT_N_S_sim_flash_P_zephyr_deferred_init 0
#define DT_N_S_sim_flash_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_sim_flash_P_wakeup_source 0
#define DT_N_S_sim_flash_P_wakeup_source_EXISTS 1
#define DT_N_S_sim_flash_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_sim_flash_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /sim_flash/flash_sim@0
 *
 * Node identifier: DT_N_S_sim_flash_S_flash_sim_0
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sim_flash_S_flash_sim_0_PATH "/sim_flash/flash_sim@0"

/* Node's name with unit-address: */
#define DT_N_S_sim_flash_S_flash_sim_0_FULL_NAME "flash_sim@0"
#define DT_N_S_sim_flash_S_flash_sim_0_FULL_NAME_UNQUOTED flash_sim@0
#define DT_N_S_sim_flash_S_flash_sim_0_FULL_NAME_TOKEN flash_sim_0
#define DT_N_S_sim_flash_S_flash_sim_0_FULL_NAME_UPPER_TOKEN FLASH_SIM_0

/* Node parent (/sim_flash) identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_PARENT DT_N_S_sim_flash

/* Node's index in its parent's list of children: */
#define DT_N_S_sim_flash_S_flash_sim_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_sim_flash_S_flash_sim_0_NODELABEL_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_NODELABEL(fn) fn(flash_sim0)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(flash_sim0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_ANCESTOR(fn) fn(DT_N_S_sim_flash) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sim_flash_S_flash_sim_0_CHILD_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_sim_flash_S_flash_sim_0_HASH b0fPiN8H3_hEz5yDd1eSqfx62fdB9_BCKh51RrABQRQ

/* Node's dependency ordinal: */
#define DT_N_S_sim_flash_S_flash_sim_0_ORD 5
#define DT_N_S_sim_flash_S_flash_sim_0_ORD_STR_SORTABLE 00005

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sim_flash_S_flash_sim_0_REQUIRES_ORDS \
	4, /* /sim_flash */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sim_flash_S_flash_sim_0_SUPPORTS_ORDS \
	6, /* /sim_flash/flash_sim@0/partitions */

/* Existence and alternate IDs: */
#define DT_N_S_sim_flash_S_flash_sim_0_EXISTS 1
#define DT_N_INST_1_soc_nv_flash  DT_N_S_sim_flash_S_flash_sim_0
#define DT_N_NODELABEL_flash_sim0 DT_N_S_sim_flash_S_flash_sim_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_sim_flash_S_flash_sim_0_REG_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_REG_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_sim_flash_S_flash_sim_0_REG_IDX_0_VAL_SIZE 1048576 /* 0x100000 */
#define DT_N_S_sim_flash_S_flash_sim_0_RANGES_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_FOREACH_RANGE(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_IRQ_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_IRQ_LEVEL 0
#define DT_N_S_sim_flash_S_flash_sim_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_sim_flash_S_flash_sim_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sim_flash_S_flash_sim_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_sim_flash_S_flash_sim_0_P_erase_block_size 1024
#define DT_N_S_sim_flash_S_flash_sim_0_P_erase_block_size_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_write_block_size 4
#define DT_N_S_sim_flash_S_flash_sim_0_P_write_block_size_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sim_flash_S_flash_sim_0, compatible, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0, compatible, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_LEN 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_compatible_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_reg {0 /* 0x0 */, 1048576 /* 0x100000 */}
#define DT_N_S_sim_flash_S_flash_sim_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_reg_IDX_0 0
#define DT_N_S_sim_flash_S_flash_sim_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_reg_IDX_1 1048576
#define DT_N_S_sim_flash_S_flash_sim_0_P_reg_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_zephyr_deferred_init 0
#define DT_N_S_sim_flash_S_flash_sim_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_wakeup_source 0
#define DT_N_S_sim_flash_S_flash_sim_0_P_wakeup_source_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_sim_flash_S_flash_sim_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /sim_flash/flash_sim@0/partitions
 *
 * Node identifier: DT_N_S_sim_flash_S_flash_sim_0_S_partitions
 *
 * Binding (compatible = fixed-partitions):
 *   $ZEPHYR_BASE/dts/bindings/mtd/fixed-partitions.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_PATH "/sim_flash/flash_sim@0/partitions"

/* Node's name with unit-address: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FULL_NAME "partitions"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FULL_NAME_UNQUOTED partitions
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FULL_NAME_TOKEN partitions
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FULL_NAME_UPPER_TOKEN PARTITIONS

/* Node parent (/sim_flash/flash_sim@0) identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_PARENT DT_N_S_sim_flash_S_flash_sim_0

/* Node's index in its parent's list of children: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_NODELABEL_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_NODELABEL(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_ANCESTOR(fn) fn(DT_N_S_sim_flash_S_flash_sim_0) fn(DT_N_S_sim_flash) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_CHILD_NUM 4
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_CHILD_NUM_STATUS_OKAY 4
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_HASH 24Cti7_MzA_oAG8ZJOCDD_8CAMvXhA6RO_RuYHnJFes

/* Node's dependency ordinal: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_ORD 6
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_ORD_STR_SORTABLE 00006

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_REQUIRES_ORDS \
	5, /* /sim_flash/flash_sim@0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_SUPPORTS_ORDS \
	7, /* /sim_flash/flash_sim@0/partitions/partition@31000 */ \
	20, /* /sim_flash/flash_sim@0/partitions/partition@1000 */ \
	21, /* /sim_flash/flash_sim@0/partitions/partition@11000 */ \
	22, /* /sim_flash/flash_sim@0/partitions/partition@21000 */

/* Existence and alternate IDs: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_EXISTS 1
#define DT_N_INST_0_fixed_partitions DT_N_S_sim_flash_S_flash_sim_0_S_partitions

/* Macros for properties that are special in the specification: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_REG_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_RANGES_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_FOREACH_RANGE(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_IRQ_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_IRQ_LEVEL 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_COMPAT_MATCHES_fixed_partitions 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /sim_flash/flash_sim@0/partitions/partition@31000
 *
 * Node identifier: DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_PATH "/sim_flash/flash_sim@0/partitions/partition@31000"

/* Node's name with unit-address: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FULL_NAME "partition@31000"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FULL_NAME_UNQUOTED partition@31000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FULL_NAME_TOKEN partition_31000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FULL_NAME_UPPER_TOKEN PARTITION_31000

/* Node parent (/sim_flash/flash_sim@0/partitions) identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_PARENT DT_N_S_sim_flash_S_flash_sim_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_NODELABEL_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_NODELABEL(fn) fn(eepromemu_partition)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_NODELABEL_VARGS(fn, ...) fn(eepromemu_partition, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_ANCESTOR(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions) fn(DT_N_S_sim_flash_S_flash_sim_0) fn(DT_N_S_sim_flash) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_CHILD_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_HASH kAD9vVcRpDQjwRRzZoCOCCC3d_ogAbvUFx8CwoOMbhU

/* Node's dependency ordinal: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_ORD 7
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_ORD_STR_SORTABLE 00007

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_REQUIRES_ORDS \
	6, /* /sim_flash/flash_sim@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_SUPPORTS_ORDS \
	8, /* /eeprom1 */

/* Existence and alternate IDs: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_EXISTS 1
#define DT_N_NODELABEL_eepromemu_partition DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000

/* Macros for properties that are special in the specification: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_REG_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_REG_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_REG_IDX_0_VAL_ADDRESS 200704 /* 0x31000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_RANGES_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_FOREACH_RANGE(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_IRQ_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_IRQ_LEVEL 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_PARTITION_ID 0

/* Generic property macros: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label "eeprom-emu"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_STRING_UNQUOTED eeprom-emu
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_STRING_TOKEN eeprom_emu
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_STRING_UPPER_TOKEN EEPROM_EMU
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_IDX_0 "eeprom-emu"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_LEN 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_label_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_read_only 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_read_only_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_reg {200704 /* 0x31000 */, 65536 /* 0x10000 */}
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_reg_IDX_0 200704
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_reg_IDX_1 65536
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000_P_reg_EXISTS 1

/*
 * Devicetree node: /eeprom1
 *
 * Node identifier: DT_N_S_eeprom1
 *
 * Binding (compatible = zephyr,emu-eeprom):
 *   $ZEPHYR_BASE/dts/bindings/mtd/zephyr,emu-eeprom.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_eeprom1_PATH "/eeprom1"

/* Node's name with unit-address: */
#define DT_N_S_eeprom1_FULL_NAME "eeprom1"
#define DT_N_S_eeprom1_FULL_NAME_UNQUOTED eeprom1
#define DT_N_S_eeprom1_FULL_NAME_TOKEN eeprom1
#define DT_N_S_eeprom1_FULL_NAME_UPPER_TOKEN EEPROM1

/* Node parent (/) identifier: */
#define DT_N_S_eeprom1_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_eeprom1_CHILD_IDX 10

/* Helpers for dealing with node labels: */
#define DT_N_S_eeprom1_NODELABEL_NUM 1
#define DT_N_S_eeprom1_FOREACH_NODELABEL(fn) fn(eeprom1)
#define DT_N_S_eeprom1_FOREACH_NODELABEL_VARGS(fn, ...) fn(eeprom1, __VA_ARGS__)
#define DT_N_S_eeprom1_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_eeprom1_CHILD_NUM 0
#define DT_N_S_eeprom1_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_eeprom1_FOREACH_CHILD(fn) 
#define DT_N_S_eeprom1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_eeprom1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_eeprom1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_eeprom1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_eeprom1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_eeprom1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_eeprom1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_eeprom1_HASH 1Zizdg2bnSOQl3IOug2vXIz8jdDmHTQZeXN2pIxnCgY

/* Node's dependency ordinal: */
#define DT_N_S_eeprom1_ORD 8
#define DT_N_S_eeprom1_ORD_STR_SORTABLE 00008

/* Ordinals for what this node depends on directly: */
#define DT_N_S_eeprom1_REQUIRES_ORDS \
	0, /* / */ \
	7, /* /sim_flash/flash_sim@0/partitions/partition@31000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_eeprom1_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_eeprom1_EXISTS 1
#define DT_N_ALIAS_eeprom_1           DT_N_S_eeprom1
#define DT_N_INST_0_zephyr_emu_eeprom DT_N_S_eeprom1
#define DT_N_NODELABEL_eeprom1        DT_N_S_eeprom1

/* Macros for properties that are special in the specification: */
#define DT_N_S_eeprom1_REG_NUM 0
#define DT_N_S_eeprom1_RANGES_NUM 0
#define DT_N_S_eeprom1_FOREACH_RANGE(fn) 
#define DT_N_S_eeprom1_IRQ_NUM 0
#define DT_N_S_eeprom1_IRQ_LEVEL 0
#define DT_N_S_eeprom1_COMPAT_MATCHES_zephyr_emu_eeprom 1
#define DT_N_S_eeprom1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_eeprom1_COMPAT_VENDOR_IDX_0 "The Zephyr Project"
#define DT_N_S_eeprom1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_eeprom1_COMPAT_MODEL_IDX_0 "emu-eeprom"
#define DT_N_S_eeprom1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_eeprom1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_eeprom1_P_size 4096
#define DT_N_S_eeprom1_P_size_EXISTS 1
#define DT_N_S_eeprom1_P_pagesize 8192
#define DT_N_S_eeprom1_P_pagesize_EXISTS 1
#define DT_N_S_eeprom1_P_partition DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000
#define DT_N_S_eeprom1_P_partition_IDX_0 DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000
#define DT_N_S_eeprom1_P_partition_IDX_0_PH DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000
#define DT_N_S_eeprom1_P_partition_IDX_0_EXISTS 1
#define DT_N_S_eeprom1_P_partition_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom1, partition, 0)
#define DT_N_S_eeprom1_P_partition_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom1, partition, 0)
#define DT_N_S_eeprom1_P_partition_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom1, partition, 0, __VA_ARGS__)
#define DT_N_S_eeprom1_P_partition_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom1, partition, 0, __VA_ARGS__)
#define DT_N_S_eeprom1_P_partition_LEN 1
#define DT_N_S_eeprom1_P_partition_EXISTS 1
#define DT_N_S_eeprom1_P_rambuf 1
#define DT_N_S_eeprom1_P_rambuf_EXISTS 1
#define DT_N_S_eeprom1_P_partition_erase 0
#define DT_N_S_eeprom1_P_partition_erase_EXISTS 1
#define DT_N_S_eeprom1_P_read_only 0
#define DT_N_S_eeprom1_P_read_only_EXISTS 1
#define DT_N_S_eeprom1_P_status "okay"
#define DT_N_S_eeprom1_P_status_STRING_UNQUOTED okay
#define DT_N_S_eeprom1_P_status_STRING_TOKEN okay
#define DT_N_S_eeprom1_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_eeprom1_P_status_IDX_0 "okay"
#define DT_N_S_eeprom1_P_status_IDX_0_EXISTS 1
#define DT_N_S_eeprom1_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_eeprom1_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_eeprom1_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_eeprom1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom1, status, 0)
#define DT_N_S_eeprom1_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom1, status, 0)
#define DT_N_S_eeprom1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom1, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom1_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom1, status, 0, __VA_ARGS__)
#define DT_N_S_eeprom1_P_status_LEN 1
#define DT_N_S_eeprom1_P_status_EXISTS 1
#define DT_N_S_eeprom1_P_compatible {"zephyr,emu-eeprom"}
#define DT_N_S_eeprom1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_eeprom1_P_compatible_IDX_0 "zephyr,emu-eeprom"
#define DT_N_S_eeprom1_P_compatible_IDX_0_STRING_UNQUOTED zephyr,emu-eeprom
#define DT_N_S_eeprom1_P_compatible_IDX_0_STRING_TOKEN zephyr_emu_eeprom
#define DT_N_S_eeprom1_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_EMU_EEPROM
#define DT_N_S_eeprom1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_eeprom1, compatible, 0)
#define DT_N_S_eeprom1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_eeprom1, compatible, 0)
#define DT_N_S_eeprom1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_eeprom1, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_eeprom1, compatible, 0, __VA_ARGS__)
#define DT_N_S_eeprom1_P_compatible_LEN 1
#define DT_N_S_eeprom1_P_compatible_EXISTS 1
#define DT_N_S_eeprom1_P_zephyr_deferred_init 0
#define DT_N_S_eeprom1_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_eeprom1_P_wakeup_source 0
#define DT_N_S_eeprom1_P_wakeup_source_EXISTS 1
#define DT_N_S_eeprom1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_eeprom1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /flash@500000
 *
 * Node identifier: DT_N_S_flash_500000
 *
 * Binding (compatible = soc-nv-flash):
 *   $ZEPHYR_BASE/dts/bindings/mtd/soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_flash_500000_PATH "/flash@500000"

/* Node's name with unit-address: */
#define DT_N_S_flash_500000_FULL_NAME "flash@500000"
#define DT_N_S_flash_500000_FULL_NAME_UNQUOTED flash@500000
#define DT_N_S_flash_500000_FULL_NAME_TOKEN flash_500000
#define DT_N_S_flash_500000_FULL_NAME_UPPER_TOKEN FLASH_500000

/* Node parent (/) identifier: */
#define DT_N_S_flash_500000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_flash_500000_CHILD_IDX 7

/* Helpers for dealing with node labels: */
#define DT_N_S_flash_500000_NODELABEL_NUM 1
#define DT_N_S_flash_500000_FOREACH_NODELABEL(fn) fn(flash0)
#define DT_N_S_flash_500000_FOREACH_NODELABEL_VARGS(fn, ...) fn(flash0, __VA_ARGS__)
#define DT_N_S_flash_500000_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_flash_500000_CHILD_NUM 0
#define DT_N_S_flash_500000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_flash_500000_FOREACH_CHILD(fn) 
#define DT_N_S_flash_500000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_flash_500000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_flash_500000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_flash_500000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_flash_500000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_flash_500000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_flash_500000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_flash_500000_HASH X_Fjqi2Hv_V5wsSu0OOFu6qp9ZXKYDuNmTEhyoIwdrI

/* Node's dependency ordinal: */
#define DT_N_S_flash_500000_ORD 9
#define DT_N_S_flash_500000_ORD_STR_SORTABLE 00009

/* Ordinals for what this node depends on directly: */
#define DT_N_S_flash_500000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_flash_500000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_flash_500000_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_flash_500000
#define DT_N_NODELABEL_flash0    DT_N_S_flash_500000

/* Macros for properties that are special in the specification: */
#define DT_N_S_flash_500000_REG_NUM 1
#define DT_N_S_flash_500000_REG_IDX_0_EXISTS 1
#define DT_N_S_flash_500000_REG_IDX_0_VAL_ADDRESS 5242880 /* 0x500000 */
#define DT_N_S_flash_500000_REG_IDX_0_VAL_SIZE 4194304 /* 0x400000 */
#define DT_N_S_flash_500000_RANGES_NUM 0
#define DT_N_S_flash_500000_FOREACH_RANGE(fn) 
#define DT_N_S_flash_500000_IRQ_NUM 0
#define DT_N_S_flash_500000_IRQ_LEVEL 0
#define DT_N_S_flash_500000_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_flash_500000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_flash_500000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_flash_500000_P_compatible {"soc-nv-flash"}
#define DT_N_S_flash_500000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_flash_500000_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_flash_500000_P_compatible_IDX_0_STRING_UNQUOTED soc-nv-flash
#define DT_N_S_flash_500000_P_compatible_IDX_0_STRING_TOKEN soc_nv_flash
#define DT_N_S_flash_500000_P_compatible_IDX_0_STRING_UPPER_TOKEN SOC_NV_FLASH
#define DT_N_S_flash_500000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_flash_500000, compatible, 0)
#define DT_N_S_flash_500000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_flash_500000, compatible, 0)
#define DT_N_S_flash_500000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_flash_500000, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_500000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_flash_500000, compatible, 0, __VA_ARGS__)
#define DT_N_S_flash_500000_P_compatible_LEN 1
#define DT_N_S_flash_500000_P_compatible_EXISTS 1
#define DT_N_S_flash_500000_P_reg {5242880 /* 0x500000 */, 4194304 /* 0x400000 */}
#define DT_N_S_flash_500000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_flash_500000_P_reg_IDX_0 5242880
#define DT_N_S_flash_500000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_flash_500000_P_reg_IDX_1 4194304
#define DT_N_S_flash_500000_P_reg_EXISTS 1
#define DT_N_S_flash_500000_P_zephyr_deferred_init 0
#define DT_N_S_flash_500000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_flash_500000_P_wakeup_source 0
#define DT_N_S_flash_500000_P_wakeup_source_EXISTS 1
#define DT_N_S_flash_500000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_flash_500000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /ieee802154
 *
 * Node identifier: DT_N_S_ieee802154
 *
 * Binding (compatible = zephyr,ieee802154-uart-pipe):
 *   $ZEPHYR_BASE/dts/bindings/ieee802154/zephyr,ieee802154-uart-pipe.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_ieee802154_PATH "/ieee802154"

/* Node's name with unit-address: */
#define DT_N_S_ieee802154_FULL_NAME "ieee802154"
#define DT_N_S_ieee802154_FULL_NAME_UNQUOTED ieee802154
#define DT_N_S_ieee802154_FULL_NAME_TOKEN ieee802154
#define DT_N_S_ieee802154_FULL_NAME_UPPER_TOKEN IEEE802154

/* Node parent (/) identifier: */
#define DT_N_S_ieee802154_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_ieee802154_CHILD_IDX 12

/* Helpers for dealing with node labels: */
#define DT_N_S_ieee802154_NODELABEL_NUM 1
#define DT_N_S_ieee802154_FOREACH_NODELABEL(fn) fn(ieee802154)
#define DT_N_S_ieee802154_FOREACH_NODELABEL_VARGS(fn, ...) fn(ieee802154, __VA_ARGS__)
#define DT_N_S_ieee802154_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_ieee802154_CHILD_NUM 0
#define DT_N_S_ieee802154_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_ieee802154_FOREACH_CHILD(fn) 
#define DT_N_S_ieee802154_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_ieee802154_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_ieee802154_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_ieee802154_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_ieee802154_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_ieee802154_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_ieee802154_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_ieee802154_HASH qF0ziK1UndkeiB_pYt5XQd8TxByC2v8ZJVZsDc6AXOc

/* Node's dependency ordinal: */
#define DT_N_S_ieee802154_ORD 10
#define DT_N_S_ieee802154_ORD_STR_SORTABLE 00010

/* Ordinals for what this node depends on directly: */
#define DT_N_S_ieee802154_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_ieee802154_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_ieee802154_EXISTS 1
#define DT_N_INST_0_zephyr_ieee802154_uart_pipe DT_N_S_ieee802154
#define DT_N_NODELABEL_ieee802154               DT_N_S_ieee802154

/* Macros for properties that are special in the specification: */
#define DT_N_S_ieee802154_REG_NUM 0
#define DT_N_S_ieee802154_RANGES_NUM 0
#define DT_N_S_ieee802154_FOREACH_RANGE(fn) 
#define DT_N_S_ieee802154_IRQ_NUM 0
#define DT_N_S_ieee802154_IRQ_LEVEL 0
#define DT_N_S_ieee802154_COMPAT_MATCHES_zephyr_ieee802154_uart_pipe 1
#define DT_N_S_ieee802154_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_ieee802154_COMPAT_VENDOR_IDX_0 "The Zephyr Project"
#define DT_N_S_ieee802154_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_ieee802154_COMPAT_MODEL_IDX_0 "ieee802154-uart-pipe"
#define DT_N_S_ieee802154_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_ieee802154_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_ieee802154_P_compatible {"zephyr,ieee802154-uart-pipe"}
#define DT_N_S_ieee802154_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_ieee802154_P_compatible_IDX_0 "zephyr,ieee802154-uart-pipe"
#define DT_N_S_ieee802154_P_compatible_IDX_0_STRING_UNQUOTED zephyr,ieee802154-uart-pipe
#define DT_N_S_ieee802154_P_compatible_IDX_0_STRING_TOKEN zephyr_ieee802154_uart_pipe
#define DT_N_S_ieee802154_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_IEEE802154_UART_PIPE
#define DT_N_S_ieee802154_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_ieee802154, compatible, 0)
#define DT_N_S_ieee802154_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_ieee802154, compatible, 0)
#define DT_N_S_ieee802154_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_ieee802154, compatible, 0, __VA_ARGS__)
#define DT_N_S_ieee802154_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_ieee802154, compatible, 0, __VA_ARGS__)
#define DT_N_S_ieee802154_P_compatible_LEN 1
#define DT_N_S_ieee802154_P_compatible_EXISTS 1
#define DT_N_S_ieee802154_P_zephyr_deferred_init 0
#define DT_N_S_ieee802154_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_ieee802154_P_wakeup_source 0
#define DT_N_S_ieee802154_P_wakeup_source_EXISTS 1
#define DT_N_S_ieee802154_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_ieee802154_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /loapic@fee00000
 *
 * Node identifier: DT_N_S_loapic_fee00000
 *
 * Binding (compatible = intel,loapic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/intel,loapic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_loapic_fee00000_PATH "/loapic@fee00000"

/* Node's name with unit-address: */
#define DT_N_S_loapic_fee00000_FULL_NAME "loapic@fee00000"
#define DT_N_S_loapic_fee00000_FULL_NAME_UNQUOTED loapic@fee00000
#define DT_N_S_loapic_fee00000_FULL_NAME_TOKEN loapic_fee00000
#define DT_N_S_loapic_fee00000_FULL_NAME_UPPER_TOKEN LOAPIC_FEE00000

/* Node parent (/) identifier: */
#define DT_N_S_loapic_fee00000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_loapic_fee00000_CHILD_IDX 4

/* Helpers for dealing with node labels: */
#define DT_N_S_loapic_fee00000_NODELABEL_NUM 1
#define DT_N_S_loapic_fee00000_FOREACH_NODELABEL(fn) fn(intc_loapic)
#define DT_N_S_loapic_fee00000_FOREACH_NODELABEL_VARGS(fn, ...) fn(intc_loapic, __VA_ARGS__)
#define DT_N_S_loapic_fee00000_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_loapic_fee00000_CHILD_NUM 0
#define DT_N_S_loapic_fee00000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_loapic_fee00000_FOREACH_CHILD(fn) 
#define DT_N_S_loapic_fee00000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_loapic_fee00000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_loapic_fee00000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_loapic_fee00000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_loapic_fee00000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_loapic_fee00000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_loapic_fee00000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_loapic_fee00000_HASH IlfWWy1uCKvkI_ysCTB_nzAWh_EMQn2AZRNu2f_ostg

/* Node's dependency ordinal: */
#define DT_N_S_loapic_fee00000_ORD 11
#define DT_N_S_loapic_fee00000_ORD_STR_SORTABLE 00011

/* Ordinals for what this node depends on directly: */
#define DT_N_S_loapic_fee00000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_loapic_fee00000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_loapic_fee00000_EXISTS 1
#define DT_N_INST_0_intel_loapic   DT_N_S_loapic_fee00000
#define DT_N_NODELABEL_intc_loapic DT_N_S_loapic_fee00000

/* Macros for properties that are special in the specification: */
#define DT_N_S_loapic_fee00000_REG_NUM 1
#define DT_N_S_loapic_fee00000_REG_IDX_0_EXISTS 1
#define DT_N_S_loapic_fee00000_REG_IDX_0_VAL_ADDRESS 4276092928 /* 0xfee00000 */
#define DT_N_S_loapic_fee00000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_loapic_fee00000_RANGES_NUM 0
#define DT_N_S_loapic_fee00000_FOREACH_RANGE(fn) 
#define DT_N_S_loapic_fee00000_IRQ_NUM 0
#define DT_N_S_loapic_fee00000_IRQ_LEVEL 0
#define DT_N_S_loapic_fee00000_COMPAT_MATCHES_intel_loapic 1
#define DT_N_S_loapic_fee00000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_loapic_fee00000_COMPAT_VENDOR_IDX_0 "Intel Corporation"
#define DT_N_S_loapic_fee00000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_loapic_fee00000_COMPAT_MODEL_IDX_0 "loapic"
#define DT_N_S_loapic_fee00000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_loapic_fee00000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_loapic_fee00000_P_reg {4276092928 /* 0xfee00000 */, 4096 /* 0x1000 */}
#define DT_N_S_loapic_fee00000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_loapic_fee00000_P_reg_IDX_0 4276092928
#define DT_N_S_loapic_fee00000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_loapic_fee00000_P_reg_IDX_1 4096
#define DT_N_S_loapic_fee00000_P_reg_EXISTS 1
#define DT_N_S_loapic_fee00000_P_interrupt_controller 1
#define DT_N_S_loapic_fee00000_P_interrupt_controller_EXISTS 1
#define DT_N_S_loapic_fee00000_P_compatible {"intel,loapic"}
#define DT_N_S_loapic_fee00000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_loapic_fee00000_P_compatible_IDX_0 "intel,loapic"
#define DT_N_S_loapic_fee00000_P_compatible_IDX_0_STRING_UNQUOTED intel,loapic
#define DT_N_S_loapic_fee00000_P_compatible_IDX_0_STRING_TOKEN intel_loapic
#define DT_N_S_loapic_fee00000_P_compatible_IDX_0_STRING_UPPER_TOKEN INTEL_LOAPIC
#define DT_N_S_loapic_fee00000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_loapic_fee00000, compatible, 0)
#define DT_N_S_loapic_fee00000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_loapic_fee00000, compatible, 0)
#define DT_N_S_loapic_fee00000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_loapic_fee00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_loapic_fee00000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_loapic_fee00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_loapic_fee00000_P_compatible_LEN 1
#define DT_N_S_loapic_fee00000_P_compatible_EXISTS 1
#define DT_N_S_loapic_fee00000_P_zephyr_deferred_init 0
#define DT_N_S_loapic_fee00000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_loapic_fee00000_P_wakeup_source 0
#define DT_N_S_loapic_fee00000_P_wakeup_source_EXISTS 1
#define DT_N_S_loapic_fee00000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_loapic_fee00000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /memory@0
 *
 * Node identifier: DT_N_S_memory_0
 */

/* Node's full path: */
#define DT_N_S_memory_0_PATH "/memory@0"

/* Node's name with unit-address: */
#define DT_N_S_memory_0_FULL_NAME "memory@0"
#define DT_N_S_memory_0_FULL_NAME_UNQUOTED memory@0
#define DT_N_S_memory_0_FULL_NAME_TOKEN memory_0
#define DT_N_S_memory_0_FULL_NAME_UPPER_TOKEN MEMORY_0

/* Node parent (/) identifier: */
#define DT_N_S_memory_0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_0_CHILD_IDX 5

/* Helpers for dealing with node labels: */
#define DT_N_S_memory_0_NODELABEL_NUM 1
#define DT_N_S_memory_0_FOREACH_NODELABEL(fn) fn(dram0)
#define DT_N_S_memory_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(dram0, __VA_ARGS__)
#define DT_N_S_memory_0_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_memory_0_CHILD_NUM 0
#define DT_N_S_memory_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_memory_0_FOREACH_CHILD(fn) 
#define DT_N_S_memory_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_memory_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_memory_0_HASH 9y_g6efAFMFJHpvX5LvqTWyC5DlDdpWvtXC7_n8KZJA

/* Node's dependency ordinal: */
#define DT_N_S_memory_0_ORD 12
#define DT_N_S_memory_0_ORD_STR_SORTABLE 00012

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_0_EXISTS 1
#define DT_N_NODELABEL_dram0 DT_N_S_memory_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_0_REG_NUM 1
#define DT_N_S_memory_0_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_memory_0_REG_IDX_0_VAL_SIZE 33554432 /* 0x2000000 */
#define DT_N_S_memory_0_RANGES_NUM 0
#define DT_N_S_memory_0_FOREACH_RANGE(fn) 
#define DT_N_S_memory_0_IRQ_NUM 0
#define DT_N_S_memory_0_IRQ_LEVEL 0
#define DT_N_S_memory_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_0_P_reg {0 /* 0x0 */, 33554432 /* 0x2000000 */}
#define DT_N_S_memory_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_0_P_reg_IDX_0 0
#define DT_N_S_memory_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_0_P_reg_IDX_1 33554432
#define DT_N_S_memory_0_P_reg_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"
#define DT_N_S_cpus_FULL_NAME_UNQUOTED cpus
#define DT_N_S_cpus_FULL_NAME_TOKEN cpus
#define DT_N_S_cpus_FULL_NAME_UPPER_TOKEN CPUS

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_NODELABEL_NUM 0
#define DT_N_S_cpus_FOREACH_NODELABEL(fn) 
#define DT_N_S_cpus_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_cpus_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_CHILD_NUM 1
#define DT_N_S_cpus_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_cpus_HASH iL3XRGZVvvtpNJqKV0_jvtuXF7m6kgky4nI2ifizwdg

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 13
#define DT_N_S_cpus_ORD_STR_SORTABLE 00013

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	14, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_IRQ_LEVEL 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = intel,x86):
 *   $ZEPHYR_BASE/dts/bindings/cpu/intel,x86.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_UNQUOTED cpu@0
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_TOKEN cpu_0
#define DT_N_S_cpus_S_cpu_0_FULL_NAME_UPPER_TOKEN CPU_0

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_cpus_S_cpu_0_NODELABEL_NUM 1
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL(fn) fn(cpu)
#define DT_N_S_cpus_S_cpu_0_FOREACH_NODELABEL_VARGS(fn, ...) fn(cpu, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_FOREACH_ANCESTOR(fn) fn(DT_N_S_cpus) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM 0
#define DT_N_S_cpus_S_cpu_0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_cpus_S_cpu_0_HASH Su0JBbOtM0QIxe_1ka2Xvgw4rk1QaIlMIj8Rp_v4yVQ

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 14
#define DT_N_S_cpus_S_cpu_0_ORD_STR_SORTABLE 00014

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	13, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_intel_x86 DT_N_S_cpus_S_cpu_0
#define DT_N_NODELABEL_cpu    DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_IRQ_LEVEL 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_intel_x86 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_VENDOR_IDX_0 "Intel Corporation"
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_COMPAT_MODEL_IDX_0 "x86"
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_d_cache_line_size 64
#define DT_N_S_cpus_S_cpu_0_P_d_cache_line_size_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"intel,x86"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "intel,x86"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED intel,x86
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN intel_x86
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN INTEL_X86
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_cpus_S_cpu_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /ioapic@fec00000
 *
 * Node identifier: DT_N_S_ioapic_fec00000
 *
 * Binding (compatible = intel,ioapic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/intel,ioapic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_ioapic_fec00000_PATH "/ioapic@fec00000"

/* Node's name with unit-address: */
#define DT_N_S_ioapic_fec00000_FULL_NAME "ioapic@fec00000"
#define DT_N_S_ioapic_fec00000_FULL_NAME_UNQUOTED ioapic@fec00000
#define DT_N_S_ioapic_fec00000_FULL_NAME_TOKEN ioapic_fec00000
#define DT_N_S_ioapic_fec00000_FULL_NAME_UPPER_TOKEN IOAPIC_FEC00000

/* Node parent (/) identifier: */
#define DT_N_S_ioapic_fec00000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_ioapic_fec00000_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_ioapic_fec00000_NODELABEL_NUM 1
#define DT_N_S_ioapic_fec00000_FOREACH_NODELABEL(fn) fn(intc)
#define DT_N_S_ioapic_fec00000_FOREACH_NODELABEL_VARGS(fn, ...) fn(intc, __VA_ARGS__)
#define DT_N_S_ioapic_fec00000_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_ioapic_fec00000_CHILD_NUM 0
#define DT_N_S_ioapic_fec00000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD(fn) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_ioapic_fec00000_HASH MJCb5H3fucaHuU2AJ0fLDpiYkfuKhlKzlGlh7HxIWv8

/* Node's dependency ordinal: */
#define DT_N_S_ioapic_fec00000_ORD 15
#define DT_N_S_ioapic_fec00000_ORD_STR_SORTABLE 00015

/* Ordinals for what this node depends on directly: */
#define DT_N_S_ioapic_fec00000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_ioapic_fec00000_SUPPORTS_ORDS \
	17, /* /pcie0/eth0 */ \
	18, /* /pcie0/can0 */ \
	24, /* /soc/hpet@fed00000 */ \
	25, /* /soc/rtc@70 */ \
	26, /* /soc/uart@3f8 */ \
	27, /* /soc/uart@2f8 */

/* Existence and alternate IDs: */
#define DT_N_S_ioapic_fec00000_EXISTS 1
#define DT_N_INST_0_intel_ioapic DT_N_S_ioapic_fec00000
#define DT_N_NODELABEL_intc      DT_N_S_ioapic_fec00000

/* Macros for properties that are special in the specification: */
#define DT_N_S_ioapic_fec00000_REG_NUM 1
#define DT_N_S_ioapic_fec00000_REG_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_REG_IDX_0_VAL_ADDRESS 4273995776 /* 0xfec00000 */
#define DT_N_S_ioapic_fec00000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_ioapic_fec00000_RANGES_NUM 0
#define DT_N_S_ioapic_fec00000_FOREACH_RANGE(fn) 
#define DT_N_S_ioapic_fec00000_IRQ_NUM 0
#define DT_N_S_ioapic_fec00000_IRQ_LEVEL 0
#define DT_N_S_ioapic_fec00000_COMPAT_MATCHES_intel_ioapic 1
#define DT_N_S_ioapic_fec00000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_COMPAT_VENDOR_IDX_0 "Intel Corporation"
#define DT_N_S_ioapic_fec00000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_COMPAT_MODEL_IDX_0 "ioapic"
#define DT_N_S_ioapic_fec00000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_ioapic_fec00000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_ioapic_fec00000_P_reg {4273995776 /* 0xfec00000 */, 4096 /* 0x1000 */}
#define DT_N_S_ioapic_fec00000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_reg_IDX_0 4273995776
#define DT_N_S_ioapic_fec00000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_reg_IDX_1 4096
#define DT_N_S_ioapic_fec00000_P_reg_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_interrupt_controller 1
#define DT_N_S_ioapic_fec00000_P_interrupt_controller_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_compatible {"intel,ioapic"}
#define DT_N_S_ioapic_fec00000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_compatible_IDX_0 "intel,ioapic"
#define DT_N_S_ioapic_fec00000_P_compatible_IDX_0_STRING_UNQUOTED intel,ioapic
#define DT_N_S_ioapic_fec00000_P_compatible_IDX_0_STRING_TOKEN intel_ioapic
#define DT_N_S_ioapic_fec00000_P_compatible_IDX_0_STRING_UPPER_TOKEN INTEL_IOAPIC
#define DT_N_S_ioapic_fec00000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_ioapic_fec00000, compatible, 0)
#define DT_N_S_ioapic_fec00000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_ioapic_fec00000, compatible, 0)
#define DT_N_S_ioapic_fec00000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_ioapic_fec00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_ioapic_fec00000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_ioapic_fec00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_ioapic_fec00000_P_compatible_LEN 1
#define DT_N_S_ioapic_fec00000_P_compatible_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_zephyr_deferred_init 0
#define DT_N_S_ioapic_fec00000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_wakeup_source 0
#define DT_N_S_ioapic_fec00000_P_wakeup_source_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_ioapic_fec00000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /pcie0
 *
 * Node identifier: DT_N_S_pcie0
 *
 * Binding (compatible = pcie-controller):
 *   $ZEPHYR_BASE/dts/bindings/pcie/host/pcie-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_PATH "/pcie0"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_FULL_NAME "pcie0"
#define DT_N_S_pcie0_FULL_NAME_UNQUOTED pcie0
#define DT_N_S_pcie0_FULL_NAME_TOKEN pcie0
#define DT_N_S_pcie0_FULL_NAME_UPPER_TOKEN PCIE0

/* Node parent (/) identifier: */
#define DT_N_S_pcie0_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_pcie0_CHILD_IDX 8

/* Helpers for dealing with node labels: */
#define DT_N_S_pcie0_NODELABEL_NUM 1
#define DT_N_S_pcie0_FOREACH_NODELABEL(fn) fn(pcie0)
#define DT_N_S_pcie0_FOREACH_NODELABEL_VARGS(fn, ...) fn(pcie0, __VA_ARGS__)
#define DT_N_S_pcie0_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pcie0_CHILD_NUM 2
#define DT_N_S_pcie0_CHILD_NUM_STATUS_OKAY 2
#define DT_N_S_pcie0_FOREACH_CHILD(fn) fn(DT_N_S_pcie0_S_can0) fn(DT_N_S_pcie0_S_eth0)
#define DT_N_S_pcie0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pcie0_S_can0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0_S_eth0)
#define DT_N_S_pcie0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pcie0_S_can0, __VA_ARGS__) fn(DT_N_S_pcie0_S_eth0, __VA_ARGS__)
#define DT_N_S_pcie0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_can0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0_S_eth0, __VA_ARGS__)
#define DT_N_S_pcie0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pcie0_S_can0) fn(DT_N_S_pcie0_S_eth0)
#define DT_N_S_pcie0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pcie0_S_can0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0_S_eth0)
#define DT_N_S_pcie0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pcie0_S_can0, __VA_ARGS__) fn(DT_N_S_pcie0_S_eth0, __VA_ARGS__)
#define DT_N_S_pcie0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_can0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_pcie0_S_eth0, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_pcie0_HASH 47enCVx_oUWlfrU9bhWKRdv1dUfv1_D00oDGLul_oiQ

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_ORD 16
#define DT_N_S_pcie0_ORD_STR_SORTABLE 00016

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_SUPPORTS_ORDS \
	17, /* /pcie0/eth0 */ \
	18, /* /pcie0/can0 */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_EXISTS 1
#define DT_N_INST_0_pcie_controller DT_N_S_pcie0
#define DT_N_NODELABEL_pcie0        DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_REG_NUM 0
#define DT_N_S_pcie0_RANGES_NUM 0
#define DT_N_S_pcie0_FOREACH_RANGE(fn) 
#define DT_N_S_pcie0_IRQ_NUM 0
#define DT_N_S_pcie0_IRQ_LEVEL 0
#define DT_N_S_pcie0_COMPAT_MATCHES_pcie_controller 1
#define DT_N_S_pcie0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_P_compatible {"pcie-controller"}
#define DT_N_S_pcie0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_P_compatible_IDX_0 "pcie-controller"
#define DT_N_S_pcie0_P_compatible_IDX_0_STRING_UNQUOTED pcie-controller
#define DT_N_S_pcie0_P_compatible_IDX_0_STRING_TOKEN pcie_controller
#define DT_N_S_pcie0_P_compatible_IDX_0_STRING_UPPER_TOKEN PCIE_CONTROLLER
#define DT_N_S_pcie0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0, compatible, 0)
#define DT_N_S_pcie0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0, compatible, 0)
#define DT_N_S_pcie0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_P_compatible_LEN 1
#define DT_N_S_pcie0_P_compatible_EXISTS 1
#define DT_N_S_pcie0_P_zephyr_deferred_init 0
#define DT_N_S_pcie0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_pcie0_P_wakeup_source 0
#define DT_N_S_pcie0_P_wakeup_source_EXISTS 1
#define DT_N_S_pcie0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_pcie0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_pcie0_P_acpi_hid "PNP0A08"
#define DT_N_S_pcie0_P_acpi_hid_STRING_UNQUOTED PNP0A08
#define DT_N_S_pcie0_P_acpi_hid_STRING_TOKEN PNP0A08
#define DT_N_S_pcie0_P_acpi_hid_STRING_UPPER_TOKEN PNP0A08
#define DT_N_S_pcie0_P_acpi_hid_IDX_0 "PNP0A08"
#define DT_N_S_pcie0_P_acpi_hid_IDX_0_EXISTS 1
#define DT_N_S_pcie0_P_acpi_hid_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0, acpi_hid, 0)
#define DT_N_S_pcie0_P_acpi_hid_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0, acpi_hid, 0)
#define DT_N_S_pcie0_P_acpi_hid_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0, acpi_hid, 0, __VA_ARGS__)
#define DT_N_S_pcie0_P_acpi_hid_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0, acpi_hid, 0, __VA_ARGS__)
#define DT_N_S_pcie0_P_acpi_hid_LEN 1
#define DT_N_S_pcie0_P_acpi_hid_EXISTS 1

/*
 * Devicetree node: /pcie0/eth0
 *
 * Node identifier: DT_N_S_pcie0_S_eth0
 *
 * Binding (compatible = intel,e1000):
 *   $ZEPHYR_BASE/dts/bindings/ethernet/intel,e1000.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_eth0_PATH "/pcie0/eth0"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_eth0_FULL_NAME "eth0"
#define DT_N_S_pcie0_S_eth0_FULL_NAME_UNQUOTED eth0
#define DT_N_S_pcie0_S_eth0_FULL_NAME_TOKEN eth0
#define DT_N_S_pcie0_S_eth0_FULL_NAME_UPPER_TOKEN ETH0

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_eth0_PARENT DT_N_S_pcie0

/* Node's index in its parent's list of children: */
#define DT_N_S_pcie0_S_eth0_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_pcie0_S_eth0_NODELABEL_NUM 1
#define DT_N_S_pcie0_S_eth0_FOREACH_NODELABEL(fn) fn(eth0)
#define DT_N_S_pcie0_S_eth0_FOREACH_NODELABEL_VARGS(fn, ...) fn(eth0, __VA_ARGS__)
#define DT_N_S_pcie0_S_eth0_FOREACH_ANCESTOR(fn) fn(DT_N_S_pcie0) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pcie0_S_eth0_CHILD_NUM 0
#define DT_N_S_pcie0_S_eth0_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_eth0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_pcie0_S_eth0_HASH cpnL3r1SUOIw4GDtf_u29Oublegnp03kvBWK14CoZKI

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_eth0_ORD 17
#define DT_N_S_pcie0_S_eth0_ORD_STR_SORTABLE 00017

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_eth0_REQUIRES_ORDS \
	15, /* /ioapic@fec00000 */ \
	16, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_eth0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_eth0_EXISTS 1
#define DT_N_INST_0_intel_e1000 DT_N_S_pcie0_S_eth0
#define DT_N_NODELABEL_eth0     DT_N_S_pcie0_S_eth0

/* Bus info (controller: '/pcie0', type: '['pcie']') */
#define DT_N_S_pcie0_S_eth0_BUS_pcie 1
#define DT_N_S_pcie0_S_eth0_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_eth0_REG_NUM 0
#define DT_N_S_pcie0_S_eth0_RANGES_NUM 0
#define DT_N_S_pcie0_S_eth0_FOREACH_RANGE(fn) 
#define DT_N_S_pcie0_S_eth0_IRQ_NUM 1
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_VAL_sense 256
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_eth0_IRQ_IDX_0_CONTROLLER DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_eth0_IRQ_LEVEL 1
#define DT_N_S_pcie0_S_eth0_COMPAT_MATCHES_intel_e1000 1
#define DT_N_S_pcie0_S_eth0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_COMPAT_VENDOR_IDX_0 "Intel Corporation"
#define DT_N_S_pcie0_S_eth0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_COMPAT_MODEL_IDX_0 "e1000"
#define DT_N_S_pcie0_S_eth0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_eth0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_eth0_P_interrupts {11 /* 0xb */, 256 /* 0x100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_eth0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_interrupts_IDX_0 11
#define DT_N_S_pcie0_S_eth0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_interrupts_IDX_1 256
#define DT_N_S_pcie0_S_eth0_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_eth0_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_rdmts 0
#define DT_N_S_pcie0_S_eth0_P_rdmts_IDX_0_ENUM_IDX 0
#define DT_N_S_pcie0_S_eth0_P_rdmts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_rdmts_IDX_0_ENUM_VAL_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_rdmts_ENUM_VAL_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_rdmts_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_itr 0
#define DT_N_S_pcie0_S_eth0_P_itr_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_status "okay"
#define DT_N_S_pcie0_S_eth0_P_status_STRING_UNQUOTED okay
#define DT_N_S_pcie0_S_eth0_P_status_STRING_TOKEN okay
#define DT_N_S_pcie0_S_eth0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_eth0_P_status_IDX_0 "okay"
#define DT_N_S_pcie0_S_eth0_P_status_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_pcie0_S_eth0_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_eth0, status, 0)
#define DT_N_S_pcie0_S_eth0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0_S_eth0, status, 0)
#define DT_N_S_pcie0_S_eth0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_eth0, status, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_eth0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_eth0, status, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_eth0_P_status_LEN 1
#define DT_N_S_pcie0_S_eth0_P_status_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_compatible {"intel,e1000"}
#define DT_N_S_pcie0_S_eth0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_compatible_IDX_0 "intel,e1000"
#define DT_N_S_pcie0_S_eth0_P_compatible_IDX_0_STRING_UNQUOTED intel,e1000
#define DT_N_S_pcie0_S_eth0_P_compatible_IDX_0_STRING_TOKEN intel_e1000
#define DT_N_S_pcie0_S_eth0_P_compatible_IDX_0_STRING_UPPER_TOKEN INTEL_E1000
#define DT_N_S_pcie0_S_eth0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_eth0, compatible, 0)
#define DT_N_S_pcie0_S_eth0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0_S_eth0, compatible, 0)
#define DT_N_S_pcie0_S_eth0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_eth0, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_eth0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_eth0, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_eth0_P_compatible_LEN 1
#define DT_N_S_pcie0_S_eth0_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_eth0, interrupt_parent, 0)
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0_S_eth0, interrupt_parent, 0)
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_eth0, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_eth0, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_eth0_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_zephyr_deferred_init 0
#define DT_N_S_pcie0_S_eth0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_wakeup_source 0
#define DT_N_S_pcie0_S_eth0_P_wakeup_source_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_pcie0_S_eth0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_vendor_id 32902
#define DT_N_S_pcie0_S_eth0_P_vendor_id_EXISTS 1
#define DT_N_S_pcie0_S_eth0_P_device_id 4110
#define DT_N_S_pcie0_S_eth0_P_device_id_EXISTS 1

/*
 * Devicetree node: /pcie0/can0
 *
 * Node identifier: DT_N_S_pcie0_S_can0
 *
 * Binding (compatible = kvaser,pcican):
 *   $ZEPHYR_BASE/dts/bindings/can/kvaser,pcican.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_can0_PATH "/pcie0/can0"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_can0_FULL_NAME "can0"
#define DT_N_S_pcie0_S_can0_FULL_NAME_UNQUOTED can0
#define DT_N_S_pcie0_S_can0_FULL_NAME_TOKEN can0
#define DT_N_S_pcie0_S_can0_FULL_NAME_UPPER_TOKEN CAN0

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_can0_PARENT DT_N_S_pcie0

/* Node's index in its parent's list of children: */
#define DT_N_S_pcie0_S_can0_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pcie0_S_can0_NODELABEL_NUM 1
#define DT_N_S_pcie0_S_can0_FOREACH_NODELABEL(fn) fn(can0)
#define DT_N_S_pcie0_S_can0_FOREACH_NODELABEL_VARGS(fn, ...) fn(can0, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_FOREACH_ANCESTOR(fn) fn(DT_N_S_pcie0) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pcie0_S_can0_CHILD_NUM 1
#define DT_N_S_pcie0_S_can0_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD(fn) fn(DT_N_S_pcie0_S_can0_S_can_transceiver)
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_pcie0_S_can0_S_can_transceiver)
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pcie0_S_can0_S_can_transceiver, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_can0_S_can_transceiver, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pcie0_S_can0_S_can_transceiver)
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_pcie0_S_can0_S_can_transceiver)
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pcie0_S_can0_S_can_transceiver, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_can0_S_can_transceiver, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_pcie0_S_can0_HASH Mgp36bgbzy6MuZZFw2P9RhO7LYTAp8Aaeloy9w2rgTo

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_can0_ORD 18
#define DT_N_S_pcie0_S_can0_ORD_STR_SORTABLE 00018

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_can0_REQUIRES_ORDS \
	15, /* /ioapic@fec00000 */ \
	16, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_can0_SUPPORTS_ORDS \
	19, /* /pcie0/can0/can-transceiver */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_can0_EXISTS 1
#define DT_N_INST_0_kvaser_pcican DT_N_S_pcie0_S_can0
#define DT_N_NODELABEL_can0       DT_N_S_pcie0_S_can0

/* Bus info (controller: '/pcie0', type: '['pcie']') */
#define DT_N_S_pcie0_S_can0_BUS_pcie 1
#define DT_N_S_pcie0_S_can0_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_can0_REG_NUM 0
#define DT_N_S_pcie0_S_can0_RANGES_NUM 0
#define DT_N_S_pcie0_S_can0_FOREACH_RANGE(fn) 
#define DT_N_S_pcie0_S_can0_IRQ_NUM 1
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_VAL_irq 11
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_can0_IRQ_IDX_0_CONTROLLER DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_can0_IRQ_LEVEL 1
#define DT_N_S_pcie0_S_can0_COMPAT_MATCHES_kvaser_pcican 1
#define DT_N_S_pcie0_S_can0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_COMPAT_VENDOR_IDX_0 "Kvaser"
#define DT_N_S_pcie0_S_can0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_COMPAT_MODEL_IDX_0 "pcican"
#define DT_N_S_pcie0_S_can0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_can0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_can0_P_interrupts {11 /* 0xb */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_can0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_interrupts_IDX_0 11
#define DT_N_S_pcie0_S_can0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_can0_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_can0_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_status "okay"
#define DT_N_S_pcie0_S_can0_P_status_STRING_UNQUOTED okay
#define DT_N_S_pcie0_S_can0_P_status_STRING_TOKEN okay
#define DT_N_S_pcie0_S_can0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_can0_P_status_IDX_0 "okay"
#define DT_N_S_pcie0_S_can0_P_status_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_pcie0_S_can0_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_can0, status, 0)
#define DT_N_S_pcie0_S_can0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0_S_can0, status, 0)
#define DT_N_S_pcie0_S_can0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_can0, status, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_can0, status, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_P_status_LEN 1
#define DT_N_S_pcie0_S_can0_P_status_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_compatible {"kvaser,pcican"}
#define DT_N_S_pcie0_S_can0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_compatible_IDX_0 "kvaser,pcican"
#define DT_N_S_pcie0_S_can0_P_compatible_IDX_0_STRING_UNQUOTED kvaser,pcican
#define DT_N_S_pcie0_S_can0_P_compatible_IDX_0_STRING_TOKEN kvaser_pcican
#define DT_N_S_pcie0_S_can0_P_compatible_IDX_0_STRING_UPPER_TOKEN KVASER_PCICAN
#define DT_N_S_pcie0_S_can0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_can0, compatible, 0)
#define DT_N_S_pcie0_S_can0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0_S_can0, compatible, 0)
#define DT_N_S_pcie0_S_can0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_can0, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_can0, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_P_compatible_LEN 1
#define DT_N_S_pcie0_S_can0_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_can0, interrupt_parent, 0)
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_pcie0_S_can0, interrupt_parent, 0)
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_can0, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_pcie0_S_can0, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_can0_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_zephyr_deferred_init 0
#define DT_N_S_pcie0_S_can0_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_wakeup_source 0
#define DT_N_S_pcie0_S_can0_P_wakeup_source_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_pcie0_S_can0_P_zephyr_pm_device_runtime_auto_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_vendor_id 4328
#define DT_N_S_pcie0_S_can0_P_vendor_id_EXISTS 1
#define DT_N_S_pcie0_S_can0_P_device_id 33798
#define DT_N_S_pcie0_S_can0_P_device_id_EXISTS 1

/*
 * Devicetree node: /pcie0/can0/can-transceiver
 *
 * Node identifier: DT_N_S_pcie0_S_can0_S_can_transceiver
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_PATH "/pcie0/can0/can-transceiver"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FULL_NAME "can-transceiver"
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FULL_NAME_UNQUOTED can-transceiver
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FULL_NAME_TOKEN can_transceiver
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FULL_NAME_UPPER_TOKEN CAN_TRANSCEIVER

/* Node parent (/pcie0/can0) identifier: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_PARENT DT_N_S_pcie0_S_can0

/* Node's index in its parent's list of children: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_NODELABEL_NUM 0
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_NODELABEL(fn) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_ANCESTOR(fn) fn(DT_N_S_pcie0_S_can0) fn(DT_N_S_pcie0) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_CHILD_NUM 0
#define DT_N_S_pcie0_S_can0_S_can_transceiver_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_HASH 2tbRYf_GjZS5MgqKi9yV6BPyTkqC82mNq6MDIo1Ai5U

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_ORD 19
#define DT_N_S_pcie0_S_can0_S_can_transceiver_ORD_STR_SORTABLE 00019

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_REQUIRES_ORDS \
	18, /* /pcie0/can0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_EXISTS 1

/* Bus info (controller: '/pcie0', type: '['pcie']') */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_BUS_pcie 1
#define DT_N_S_pcie0_S_can0_S_can_transceiver_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_REG_NUM 0
#define DT_N_S_pcie0_S_can0_S_can_transceiver_RANGES_NUM 0
#define DT_N_S_pcie0_S_can0_S_can_transceiver_FOREACH_RANGE(fn) 
#define DT_N_S_pcie0_S_can0_S_can_transceiver_IRQ_NUM 0
#define DT_N_S_pcie0_S_can0_S_can_transceiver_IRQ_LEVEL 0
#define DT_N_S_pcie0_S_can0_S_can_transceiver_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_can0_S_can_transceiver_P_max_bitrate 1000000
#define DT_N_S_pcie0_S_can0_S_can_transceiver_P_max_bitrate_EXISTS 1

/*
 * Devicetree node: /sim_flash/flash_sim@0/partitions/partition@1000
 *
 * Node identifier: DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_PATH "/sim_flash/flash_sim@0/partitions/partition@1000"

/* Node's name with unit-address: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FULL_NAME "partition@1000"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FULL_NAME_UNQUOTED partition@1000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FULL_NAME_TOKEN partition_1000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FULL_NAME_UPPER_TOKEN PARTITION_1000

/* Node parent (/sim_flash/flash_sim@0/partitions) identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_PARENT DT_N_S_sim_flash_S_flash_sim_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_NODELABEL_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_NODELABEL(fn) fn(storage_partition)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_NODELABEL_VARGS(fn, ...) fn(storage_partition, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_ANCESTOR(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions) fn(DT_N_S_sim_flash_S_flash_sim_0) fn(DT_N_S_sim_flash) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_CHILD_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_HASH 4DtUPz0EUye1txBnqPm_hr3FP8kLJtXJbGiljlVp6Gw

/* Node's dependency ordinal: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_ORD 20
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_ORD_STR_SORTABLE 00020

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_REQUIRES_ORDS \
	6, /* /sim_flash/flash_sim@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_EXISTS 1
#define DT_N_NODELABEL_storage_partition DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000

/* Macros for properties that are special in the specification: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_REG_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_REG_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_REG_IDX_0_VAL_ADDRESS 4096 /* 0x1000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_RANGES_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_FOREACH_RANGE(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_IRQ_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_IRQ_LEVEL 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_PARTITION_ID 1

/* Generic property macros: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label "storage"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_STRING_UNQUOTED storage
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_STRING_TOKEN storage
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_STRING_UPPER_TOKEN STORAGE
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_IDX_0 "storage"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_LEN 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_label_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_read_only 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_read_only_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_reg {4096 /* 0x1000 */, 65536 /* 0x10000 */}
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_reg_IDX_0 4096
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_reg_IDX_1 65536
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000_P_reg_EXISTS 1

/*
 * Devicetree node: /sim_flash/flash_sim@0/partitions/partition@11000
 *
 * Node identifier: DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_PATH "/sim_flash/flash_sim@0/partitions/partition@11000"

/* Node's name with unit-address: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FULL_NAME "partition@11000"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FULL_NAME_UNQUOTED partition@11000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FULL_NAME_TOKEN partition_11000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FULL_NAME_UPPER_TOKEN PARTITION_11000

/* Node parent (/sim_flash/flash_sim@0/partitions) identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_PARENT DT_N_S_sim_flash_S_flash_sim_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_NODELABEL_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_NODELABEL(fn) fn(slot0_partition)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot0_partition, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_ANCESTOR(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions) fn(DT_N_S_sim_flash_S_flash_sim_0) fn(DT_N_S_sim_flash) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_CHILD_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_HASH 1ch95K1RriX77HW8uCloZKbhs5eHESzLPFUoXUyizt0

/* Node's dependency ordinal: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_ORD 21
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_ORD_STR_SORTABLE 00021

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_REQUIRES_ORDS \
	6, /* /sim_flash/flash_sim@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_EXISTS 1
#define DT_N_NODELABEL_slot0_partition DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000

/* Macros for properties that are special in the specification: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_REG_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_REG_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_REG_IDX_0_VAL_ADDRESS 69632 /* 0x11000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_RANGES_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_FOREACH_RANGE(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_IRQ_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_IRQ_LEVEL 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_PARTITION_ID 2

/* Generic property macros: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label "image-0"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_STRING_UNQUOTED image-0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_STRING_TOKEN image_0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_STRING_UPPER_TOKEN IMAGE_0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_IDX_0 "image-0"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_LEN 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_label_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_read_only 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_read_only_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_reg {69632 /* 0x11000 */, 65536 /* 0x10000 */}
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_reg_IDX_0 69632
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_reg_IDX_1 65536
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000_P_reg_EXISTS 1

/*
 * Devicetree node: /sim_flash/flash_sim@0/partitions/partition@21000
 *
 * Node identifier: DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_PATH "/sim_flash/flash_sim@0/partitions/partition@21000"

/* Node's name with unit-address: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FULL_NAME "partition@21000"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FULL_NAME_UNQUOTED partition@21000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FULL_NAME_TOKEN partition_21000
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FULL_NAME_UPPER_TOKEN PARTITION_21000

/* Node parent (/sim_flash/flash_sim@0/partitions) identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_PARENT DT_N_S_sim_flash_S_flash_sim_0_S_partitions

/* Node's index in its parent's list of children: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_NODELABEL_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_NODELABEL(fn) fn(slot1_partition)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_NODELABEL_VARGS(fn, ...) fn(slot1_partition, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_ANCESTOR(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions) fn(DT_N_S_sim_flash_S_flash_sim_0) fn(DT_N_S_sim_flash) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_CHILD_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_HASH PhY7ICv_YkMRD0QOMPrjlFwdolTDv7GGQn_nk9uKpc4

/* Node's dependency ordinal: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_ORD 22
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_ORD_STR_SORTABLE 00022

/* Ordinals for what this node depends on directly: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_REQUIRES_ORDS \
	6, /* /sim_flash/flash_sim@0/partitions */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_EXISTS 1
#define DT_N_NODELABEL_slot1_partition DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000

/* Macros for properties that are special in the specification: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_REG_NUM 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_REG_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_REG_IDX_0_VAL_ADDRESS 135168 /* 0x21000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_RANGES_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_FOREACH_RANGE(fn) 
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_IRQ_NUM 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_IRQ_LEVEL 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_PINCTRL_NUM 0

/* fixed-partitions identifier: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_PARTITION_ID 3

/* Generic property macros: */
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label "image-1"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_STRING_UNQUOTED image-1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_STRING_TOKEN image_1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_STRING_UPPER_TOKEN IMAGE_1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_IDX_0 "image-1"
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, label, 0)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, label, 0, __VA_ARGS__)
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_LEN 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_label_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_read_only 0
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_read_only_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_reg {135168 /* 0x21000 */, 65536 /* 0x10000 */}
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_reg_IDX_0 135168
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_reg_IDX_1 65536
#define DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000_P_reg_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"
#define DT_N_S_soc_FULL_NAME_UNQUOTED soc
#define DT_N_S_soc_FULL_NAME_TOKEN soc
#define DT_N_S_soc_FULL_NAME_UPPER_TOKEN SOC

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 6

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_NODELABEL_NUM 0
#define DT_N_S_soc_FOREACH_NODELABEL(fn) 
#define DT_N_S_soc_FOREACH_NODELABEL_VARGS(fn, ...) 
#define DT_N_S_soc_FOREACH_ANCESTOR(fn) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_CHILD_NUM 4
#define DT_N_S_soc_CHILD_NUM_STATUS_OKAY 4
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8) fn(DT_N_S_soc_S_hpet_fed00000) fn(DT_N_S_soc_S_rtc_70)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3f8) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_2f8) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_hpet_fed00000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_70)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_70, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_70, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8) fn(DT_N_S_soc_S_hpet_fed00000) fn(DT_N_S_soc_S_rtc_70)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3f8) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_2f8) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_hpet_fed00000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_70)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_70, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_rtc_70, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_soc_HASH DcVqqq9YzG86l3_Hk7pNncUh2rnHG8USjbVY6wBdFts

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 23
#define DT_N_S_soc_ORD_STR_SORTABLE 00023

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	24, /* /soc/hpet@fed00000 */ \
	25, /* /soc/rtc@70 */ \
	26, /* /soc/uart@3f8 */ \
	27, /* /soc/uart@2f8 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_IRQ_LEVEL 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED simple-bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN simple_bus
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN SIMPLE_BUS
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1
#define DT_N_S_soc_P_ranges_EXISTS 1

/*
 * Devicetree node: /soc/hpet@fed00000
 *
 * Node identifier: DT_N_S_soc_S_hpet_fed00000
 *
 * Binding (compatible = intel,hpet):
 *   $ZEPHYR_BASE/dts/bindings/timer/intel,hpet.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_hpet_fed00000_PATH "/soc/hpet@fed00000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_hpet_fed00000_FULL_NAME "hpet@fed00000"
#define DT_N_S_soc_S_hpet_fed00000_FULL_NAME_UNQUOTED hpet@fed00000
#define DT_N_S_soc_S_hpet_fed00000_FULL_NAME_TOKEN hpet_fed00000
#define DT_N_S_soc_S_hpet_fed00000_FULL_NAME_UPPER_TOKEN HPET_FED00000

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_hpet_fed00000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_hpet_fed00000_CHILD_IDX 2

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_hpet_fed00000_NODELABEL_NUM 1
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_NODELABEL(fn) fn(hpet)
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_NODELABEL_VARGS(fn, ...) fn(hpet, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_hpet_fed00000_CHILD_NUM 0
#define DT_N_S_soc_S_hpet_fed00000_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_hpet_fed00000_HASH YUOuvocOBl0tT7wCof6cPQ0kn6zZ2f_hNLf1XwZFSi4

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_hpet_fed00000_ORD 24
#define DT_N_S_soc_S_hpet_fed00000_ORD_STR_SORTABLE 00024

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_hpet_fed00000_REQUIRES_ORDS \
	15, /* /ioapic@fec00000 */ \
	23, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_hpet_fed00000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_hpet_fed00000_EXISTS 1
#define DT_N_INST_0_intel_hpet DT_N_S_soc_S_hpet_fed00000
#define DT_N_NODELABEL_hpet    DT_N_S_soc_S_hpet_fed00000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_hpet_fed00000_REG_NUM 1
#define DT_N_S_soc_S_hpet_fed00000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_REG_IDX_0_VAL_ADDRESS 4275044352 /* 0xfed00000 */
#define DT_N_S_soc_S_hpet_fed00000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_hpet_fed00000_RANGES_NUM 0
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_hpet_fed00000_IRQ_NUM 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_irq 2
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_sense 0
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_priority 4
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_CONTROLLER DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_hpet_fed00000_IRQ_LEVEL 1
#define DT_N_S_soc_S_hpet_fed00000_COMPAT_MATCHES_intel_hpet 1
#define DT_N_S_soc_S_hpet_fed00000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_COMPAT_VENDOR_IDX_0 "Intel Corporation"
#define DT_N_S_soc_S_hpet_fed00000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_COMPAT_MODEL_IDX_0 "hpet"
#define DT_N_S_soc_S_hpet_fed00000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_hpet_fed00000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_hpet_fed00000_P_reg {4275044352 /* 0xfed00000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_0 4275044352
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_hpet_fed00000_P_reg_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts {2 /* 0x2 */, 0 /* 0x0 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_0 2
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_2 4
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_no_legacy_irq 0
#define DT_N_S_soc_S_hpet_fed00000_P_no_legacy_irq_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_status "okay"
#define DT_N_S_soc_S_hpet_fed00000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_hpet_fed00000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_hpet_fed00000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_hpet_fed00000_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_hpet_fed00000_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_hpet_fed00000_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, status, 0)
#define DT_N_S_soc_S_hpet_fed00000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_hpet_fed00000, status, 0)
#define DT_N_S_soc_S_hpet_fed00000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_hpet_fed00000, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_status_LEN 1
#define DT_N_S_soc_S_hpet_fed00000_P_status_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_compatible {"intel,hpet"}
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_IDX_0 "intel,hpet"
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_IDX_0_STRING_UNQUOTED intel,hpet
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_IDX_0_STRING_TOKEN intel_hpet
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_IDX_0_STRING_UPPER_TOKEN INTEL_HPET
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, compatible, 0)
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_hpet_fed00000, compatible, 0)
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_hpet_fed00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_LEN 1
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, interrupt_parent, 0)
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_hpet_fed00000, interrupt_parent, 0)
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_hpet_fed00000, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_hpet_fed00000_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_wakeup_source 0
#define DT_N_S_soc_S_hpet_fed00000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_hpet_fed00000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/rtc@70
 *
 * Node identifier: DT_N_S_soc_S_rtc_70
 *
 * Binding (compatible = motorola,mc146818):
 *   $ZEPHYR_BASE/dts/bindings/rtc/motorola,mc146818.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_rtc_70_PATH "/soc/rtc@70"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_rtc_70_FULL_NAME "rtc@70"
#define DT_N_S_soc_S_rtc_70_FULL_NAME_UNQUOTED rtc@70
#define DT_N_S_soc_S_rtc_70_FULL_NAME_TOKEN rtc_70
#define DT_N_S_soc_S_rtc_70_FULL_NAME_UPPER_TOKEN RTC_70

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_rtc_70_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_rtc_70_CHILD_IDX 3

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_rtc_70_NODELABEL_NUM 2
#define DT_N_S_soc_S_rtc_70_FOREACH_NODELABEL(fn) fn(rtc) fn(counter)
#define DT_N_S_soc_S_rtc_70_FOREACH_NODELABEL_VARGS(fn, ...) fn(rtc, __VA_ARGS__) fn(counter, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_70_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_rtc_70_CHILD_NUM 0
#define DT_N_S_soc_S_rtc_70_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_rtc_70_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_rtc_70_HASH H9WgThtYaG7AyiOo3HWFUbbu4pgCOslw3X2idXoLlv4

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_rtc_70_ORD 25
#define DT_N_S_soc_S_rtc_70_ORD_STR_SORTABLE 00025

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_rtc_70_REQUIRES_ORDS \
	15, /* /ioapic@fec00000 */ \
	23, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_rtc_70_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_rtc_70_EXISTS 1
#define DT_N_ALIAS_rtc                DT_N_S_soc_S_rtc_70
#define DT_N_INST_0_motorola_mc146818 DT_N_S_soc_S_rtc_70
#define DT_N_NODELABEL_rtc            DT_N_S_soc_S_rtc_70
#define DT_N_NODELABEL_counter        DT_N_S_soc_S_rtc_70

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_rtc_70_REG_NUM 2
#define DT_N_S_soc_S_rtc_70_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_REG_IDX_0_VAL_ADDRESS 112 /* 0x70 */
#define DT_N_S_soc_S_rtc_70_REG_IDX_0_VAL_SIZE 13 /* 0xd */
#define DT_N_S_soc_S_rtc_70_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_70_REG_IDX_1_VAL_ADDRESS 113 /* 0x71 */
#define DT_N_S_soc_S_rtc_70_REG_IDX_1_VAL_SIZE 13 /* 0xd */
#define DT_N_S_soc_S_rtc_70_RANGES_NUM 0
#define DT_N_S_soc_S_rtc_70_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_rtc_70_IRQ_NUM 1
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_VAL_irq 8
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_VAL_sense 256
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_rtc_70_IRQ_IDX_0_CONTROLLER DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_rtc_70_IRQ_LEVEL 1
#define DT_N_S_soc_S_rtc_70_COMPAT_MATCHES_motorola_mc146818 1
#define DT_N_S_soc_S_rtc_70_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_COMPAT_VENDOR_IDX_0 "Motorola, Inc."
#define DT_N_S_soc_S_rtc_70_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_COMPAT_MODEL_IDX_0 "mc146818"
#define DT_N_S_soc_S_rtc_70_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_rtc_70_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_rtc_70_P_clock_frequency 32768
#define DT_N_S_soc_S_rtc_70_P_clock_frequency_IDX_0_ENUM_IDX 2
#define DT_N_S_soc_S_rtc_70_P_clock_frequency_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_clock_frequency_IDX_0_ENUM_VAL_32768_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_clock_frequency_ENUM_VAL_32768_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_alarms_count 1
#define DT_N_S_soc_S_rtc_70_P_alarms_count_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_status "okay"
#define DT_N_S_soc_S_rtc_70_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_rtc_70_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_rtc_70_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_rtc_70_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_rtc_70_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_rtc_70_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_70, status, 0)
#define DT_N_S_soc_S_rtc_70_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_70, status, 0)
#define DT_N_S_soc_S_rtc_70_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_70, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_70_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_70, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_70_P_status_LEN 1
#define DT_N_S_soc_S_rtc_70_P_status_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_compatible {"motorola,mc146818"}
#define DT_N_S_soc_S_rtc_70_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_compatible_IDX_0 "motorola,mc146818"
#define DT_N_S_soc_S_rtc_70_P_compatible_IDX_0_STRING_UNQUOTED motorola,mc146818
#define DT_N_S_soc_S_rtc_70_P_compatible_IDX_0_STRING_TOKEN motorola_mc146818
#define DT_N_S_soc_S_rtc_70_P_compatible_IDX_0_STRING_UPPER_TOKEN MOTOROLA_MC146818
#define DT_N_S_soc_S_rtc_70_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_70, compatible, 0)
#define DT_N_S_soc_S_rtc_70_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_70, compatible, 0)
#define DT_N_S_soc_S_rtc_70_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_70, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_70_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_70, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_70_P_compatible_LEN 1
#define DT_N_S_soc_S_rtc_70_P_compatible_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_reg {112 /* 0x70 */, 13 /* 0xd */, 113 /* 0x71 */, 13 /* 0xd */}
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_0 112
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_1 13
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_2 113
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_reg_IDX_3 13
#define DT_N_S_soc_S_rtc_70_P_reg_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_interrupts {8 /* 0x8 */, 256 /* 0x100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_rtc_70_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_interrupts_IDX_0 8
#define DT_N_S_soc_S_rtc_70_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_interrupts_IDX_1 256
#define DT_N_S_soc_S_rtc_70_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_rtc_70_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_rtc_70, interrupt_parent, 0)
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_rtc_70, interrupt_parent, 0)
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_rtc_70, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_rtc_70, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_rtc_70_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_rtc_70_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_wakeup_source 0
#define DT_N_S_soc_S_rtc_70_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_rtc_70_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_rtc_70_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@3f8
 *
 * Node identifier: DT_N_S_soc_S_uart_3f8
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3f8_PATH "/soc/uart@3f8"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3f8_FULL_NAME "uart@3f8"
#define DT_N_S_soc_S_uart_3f8_FULL_NAME_UNQUOTED uart@3f8
#define DT_N_S_soc_S_uart_3f8_FULL_NAME_TOKEN uart_3f8
#define DT_N_S_soc_S_uart_3f8_FULL_NAME_UPPER_TOKEN UART_3F8

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3f8_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_3f8_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_uart_3f8_NODELABEL_NUM 1
#define DT_N_S_soc_S_uart_3f8_FOREACH_NODELABEL(fn) fn(uart0)
#define DT_N_S_soc_S_uart_3f8_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_3f8_CHILD_NUM 0
#define DT_N_S_soc_S_uart_3f8_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_uart_3f8_HASH Z6JivIwRmf_pm7chBbGuYpHnAwKUlVJyO_w1JvyBfus

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3f8_ORD 26
#define DT_N_S_soc_S_uart_3f8_ORD_STR_SORTABLE 00026

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3f8_REQUIRES_ORDS \
	15, /* /ioapic@fec00000 */ \
	23, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3f8_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3f8_EXISTS 1
#define DT_N_ALIAS_uart_0    DT_N_S_soc_S_uart_3f8
#define DT_N_INST_0_ns16550  DT_N_S_soc_S_uart_3f8
#define DT_N_NODELABEL_uart0 DT_N_S_soc_S_uart_3f8

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3f8_REG_NUM 1
#define DT_N_S_soc_S_uart_3f8_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_REG_IDX_0_VAL_ADDRESS 1016 /* 0x3f8 */
#define DT_N_S_soc_S_uart_3f8_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_uart_3f8_RANGES_NUM 0
#define DT_N_S_soc_S_uart_3f8_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_3f8_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_sense 256
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_CONTROLLER DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_3f8_IRQ_LEVEL 1
#define DT_N_S_soc_S_uart_3f8_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_3f8_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3f8_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3f8_P_reg_shift 0
#define DT_N_S_soc_S_uart_3f8_P_reg_shift_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_io_mapped 1
#define DT_N_S_soc_S_uart_3f8_P_io_mapped_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_clock_frequency 1843200
#define DT_N_S_soc_S_uart_3f8_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_current_speed 115200
#define DT_N_S_soc_S_uart_3f8_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3f8_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_parity "none"
#define DT_N_S_soc_S_uart_3f8_P_parity_STRING_UNQUOTED none
#define DT_N_S_soc_S_uart_3f8_P_parity_STRING_TOKEN none
#define DT_N_S_soc_S_uart_3f8_P_parity_STRING_UPPER_TOKEN NONE
#define DT_N_S_soc_S_uart_3f8_P_parity_IDX_0 "none"
#define DT_N_S_soc_S_uart_3f8_P_parity_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_parity_IDX_0_ENUM_IDX 0
#define DT_N_S_soc_S_uart_3f8_P_parity_IDX_0_ENUM_VAL_none_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_parity_ENUM_VAL_none_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_parity_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, parity, 0)
#define DT_N_S_soc_S_uart_3f8_P_parity_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3f8, parity, 0)
#define DT_N_S_soc_S_uart_3f8_P_parity_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, parity, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_parity_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3f8, parity, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_parity_LEN 1
#define DT_N_S_soc_S_uart_3f8_P_parity_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_status "okay"
#define DT_N_S_soc_S_uart_3f8_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_3f8_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_3f8_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3f8_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_3f8_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_uart_3f8_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, status, 0)
#define DT_N_S_soc_S_uart_3f8_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3f8, status, 0)
#define DT_N_S_soc_S_uart_3f8_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3f8, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_status_LEN 1
#define DT_N_S_soc_S_uart_3f8_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_compatible {"ns16550"}
#define DT_N_S_soc_S_uart_3f8_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_compatible_IDX_0 "ns16550"
#define DT_N_S_soc_S_uart_3f8_P_compatible_IDX_0_STRING_UNQUOTED ns16550
#define DT_N_S_soc_S_uart_3f8_P_compatible_IDX_0_STRING_TOKEN ns16550
#define DT_N_S_soc_S_uart_3f8_P_compatible_IDX_0_STRING_UPPER_TOKEN NS16550
#define DT_N_S_soc_S_uart_3f8_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, compatible, 0)
#define DT_N_S_soc_S_uart_3f8_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3f8, compatible, 0)
#define DT_N_S_soc_S_uart_3f8_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3f8, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3f8_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_reg {1016 /* 0x3f8 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_0 1016
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_1 256
#define DT_N_S_soc_S_uart_3f8_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts {4 /* 0x4 */, 256 /* 0x100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_0 4
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_1 256
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_uart_3f8_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_3f8, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_3f8, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_uart_3f8_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3f8_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_3f8_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@2f8
 *
 * Node identifier: DT_N_S_soc_S_uart_2f8
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_2f8_PATH "/soc/uart@2f8"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_2f8_FULL_NAME "uart@2f8"
#define DT_N_S_soc_S_uart_2f8_FULL_NAME_UNQUOTED uart@2f8
#define DT_N_S_soc_S_uart_2f8_FULL_NAME_TOKEN uart_2f8
#define DT_N_S_soc_S_uart_2f8_FULL_NAME_UPPER_TOKEN UART_2F8

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_2f8_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_2f8_CHILD_IDX 1

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_uart_2f8_NODELABEL_NUM 1
#define DT_N_S_soc_S_uart_2f8_FOREACH_NODELABEL(fn) fn(uart1)
#define DT_N_S_soc_S_uart_2f8_FOREACH_NODELABEL_VARGS(fn, ...) fn(uart1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_2f8_CHILD_NUM 1
#define DT_N_S_soc_S_uart_2f8_CHILD_NUM_STATUS_OKAY 1
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart)
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart)
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart)
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart)
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, __VA_ARGS__)

/* Node's hash: */
#define DT_N_S_soc_S_uart_2f8_HASH gUrZM4iSh5Uk0H4RjhmGW9yW9snfAbxkAY7raIXNGgI

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_2f8_ORD 27
#define DT_N_S_soc_S_uart_2f8_ORD_STR_SORTABLE 00027

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_2f8_REQUIRES_ORDS \
	15, /* /ioapic@fec00000 */ \
	23, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_2f8_SUPPORTS_ORDS \
	28, /* /soc/uart@2f8/bt_hci_uart */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_2f8_EXISTS 1
#define DT_N_ALIAS_uart_1    DT_N_S_soc_S_uart_2f8
#define DT_N_INST_1_ns16550  DT_N_S_soc_S_uart_2f8
#define DT_N_NODELABEL_uart1 DT_N_S_soc_S_uart_2f8

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_2f8_REG_NUM 1
#define DT_N_S_soc_S_uart_2f8_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_REG_IDX_0_VAL_ADDRESS 760 /* 0x2f8 */
#define DT_N_S_soc_S_uart_2f8_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_uart_2f8_RANGES_NUM 0
#define DT_N_S_soc_S_uart_2f8_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_2f8_IRQ_NUM 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_sense 256
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_CONTROLLER DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_2f8_IRQ_LEVEL 1
#define DT_N_S_soc_S_uart_2f8_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_2f8_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_2f8_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_2f8_P_reg_shift 0
#define DT_N_S_soc_S_uart_2f8_P_reg_shift_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_io_mapped 1
#define DT_N_S_soc_S_uart_2f8_P_io_mapped_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_clock_frequency 1843200
#define DT_N_S_soc_S_uart_2f8_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_current_speed 115200
#define DT_N_S_soc_S_uart_2f8_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_2f8_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_parity "none"
#define DT_N_S_soc_S_uart_2f8_P_parity_STRING_UNQUOTED none
#define DT_N_S_soc_S_uart_2f8_P_parity_STRING_TOKEN none
#define DT_N_S_soc_S_uart_2f8_P_parity_STRING_UPPER_TOKEN NONE
#define DT_N_S_soc_S_uart_2f8_P_parity_IDX_0 "none"
#define DT_N_S_soc_S_uart_2f8_P_parity_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_parity_IDX_0_ENUM_IDX 0
#define DT_N_S_soc_S_uart_2f8_P_parity_IDX_0_ENUM_VAL_none_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_parity_ENUM_VAL_none_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_parity_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, parity, 0)
#define DT_N_S_soc_S_uart_2f8_P_parity_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8, parity, 0)
#define DT_N_S_soc_S_uart_2f8_P_parity_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, parity, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_parity_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8, parity, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_parity_LEN 1
#define DT_N_S_soc_S_uart_2f8_P_parity_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_status "okay"
#define DT_N_S_soc_S_uart_2f8_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_2f8_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_2f8_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_2f8_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_2f8_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_uart_2f8_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, status, 0)
#define DT_N_S_soc_S_uart_2f8_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8, status, 0)
#define DT_N_S_soc_S_uart_2f8_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_status_LEN 1
#define DT_N_S_soc_S_uart_2f8_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_compatible {"ns16550"}
#define DT_N_S_soc_S_uart_2f8_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_compatible_IDX_0 "ns16550"
#define DT_N_S_soc_S_uart_2f8_P_compatible_IDX_0_STRING_UNQUOTED ns16550
#define DT_N_S_soc_S_uart_2f8_P_compatible_IDX_0_STRING_TOKEN ns16550
#define DT_N_S_soc_S_uart_2f8_P_compatible_IDX_0_STRING_UPPER_TOKEN NS16550
#define DT_N_S_soc_S_uart_2f8_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, compatible, 0)
#define DT_N_S_soc_S_uart_2f8_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8, compatible, 0)
#define DT_N_S_soc_S_uart_2f8_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_2f8_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_reg {760 /* 0x2f8 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_0 760
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_1 256
#define DT_N_S_soc_S_uart_2f8_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts {3 /* 0x3 */, 256 /* 0x100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_0 3
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_1 256
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_uart_2f8_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8, interrupt_parent, 0)
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8, interrupt_parent, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_uart_2f8_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_wakeup_source 0
#define DT_N_S_soc_S_uart_2f8_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_2f8_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/uart@2f8/bt_hci_uart
 *
 * Node identifier: DT_N_S_soc_S_uart_2f8_S_bt_hci_uart
 *
 * Binding (compatible = zephyr,bt-hci-uart):
 *   $ZEPHYR_BASE/dts/bindings/bluetooth/zephyr,bt-hci-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_PATH "/soc/uart@2f8/bt_hci_uart"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FULL_NAME "bt_hci_uart"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FULL_NAME_UNQUOTED bt_hci_uart
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FULL_NAME_TOKEN bt_hci_uart
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FULL_NAME_UPPER_TOKEN BT_HCI_UART

/* Node parent (/soc/uart@2f8) identifier: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_PARENT DT_N_S_soc_S_uart_2f8

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_CHILD_IDX 0

/* Helpers for dealing with node labels: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_NODELABEL_NUM 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_NODELABEL(fn) fn(bt_hci_uart)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_NODELABEL_VARGS(fn, ...) fn(bt_hci_uart, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_ANCESTOR(fn) fn(DT_N_S_soc_S_uart_2f8) fn(DT_N_S_soc) fn(DT_N)

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_CHILD_NUM 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_CHILD_NUM_STATUS_OKAY 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's hash: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_HASH NS_Az7J0UsovplNsIALkd24_r0GqrcO1YzN8UeYWiBU

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_ORD 28
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_ORD_STR_SORTABLE 00028

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_REQUIRES_ORDS \
	27, /* /soc/uart@2f8 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_EXISTS 1
#define DT_N_INST_0_zephyr_bt_hci_uart DT_N_S_soc_S_uart_2f8_S_bt_hci_uart
#define DT_N_NODELABEL_bt_hci_uart     DT_N_S_soc_S_uart_2f8_S_bt_hci_uart

/* Bus info (controller: '/soc/uart@2f8', type: '['uart']') */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_BUS_uart 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_BUS DT_N_S_soc_S_uart_2f8

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_REG_NUM 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_RANGES_NUM 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_IRQ_NUM 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_IRQ_LEVEL 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_COMPAT_MATCHES_zephyr_bt_hci_uart 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_COMPAT_VENDOR_IDX_0 "The Zephyr Project"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_COMPAT_MODEL_IDX_0 "bt-hci-uart"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name "H:4"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_STRING_UNQUOTED H:4
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_STRING_TOKEN H_4
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_STRING_UPPER_TOKEN H_4
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_IDX_0 "H:4"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_name, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_name, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_name, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_name, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_LEN 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_name_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus "uart"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_STRING_UNQUOTED uart
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_STRING_TOKEN uart
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_STRING_UPPER_TOKEN UART
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_IDX_0 "uart"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_IDX_0_ENUM_IDX 3
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_IDX_0_ENUM_VAL_uart_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_ENUM_VAL_uart_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_bus, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_bus, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_bus, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, bt_hci_bus, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_LEN 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_bus_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_vs_ext 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_bt_hci_vs_ext_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status "okay"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_IDX_0 "okay"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_IDX_0_ENUM_IDX 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_IDX_0_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_ENUM_VAL_okay_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, status, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, status, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, status, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_LEN 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible {"zephyr,bt-hci-uart"}
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_IDX_0 "zephyr,bt-hci-uart"
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_IDX_0_STRING_UNQUOTED zephyr,bt-hci-uart
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_IDX_0_STRING_TOKEN zephyr_bt_hci_uart
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_IDX_0_STRING_UPPER_TOKEN ZEPHYR_BT_HCI_UART
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, compatible, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, compatible, 0)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_zephyr_deferred_init 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_zephyr_deferred_init_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_wakeup_source 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_uart_2f8_S_bt_hci_uart_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_sram                    DT_N_S_memory_0
#define DT_CHOSEN_zephyr_sram_EXISTS             1
#define DT_CHOSEN_zephyr_flash                   DT_N_S_flash_500000
#define DT_CHOSEN_zephyr_flash_EXISTS            1
#define DT_CHOSEN_zephyr_console                 DT_N_S_soc_S_uart_3f8
#define DT_CHOSEN_zephyr_console_EXISTS          1
#define DT_CHOSEN_zephyr_bt_hci                  DT_N_S_soc_S_uart_2f8_S_bt_hci_uart
#define DT_CHOSEN_zephyr_bt_hci_EXISTS           1
#define DT_CHOSEN_zephyr_shell_uart              DT_N_S_soc_S_uart_3f8
#define DT_CHOSEN_zephyr_shell_uart_EXISTS       1
#define DT_CHOSEN_zephyr_uart_pipe               DT_N_S_soc_S_uart_2f8
#define DT_CHOSEN_zephyr_uart_pipe_EXISTS        1
#define DT_CHOSEN_zephyr_bt_mon_uart             DT_N_S_soc_S_uart_2f8
#define DT_CHOSEN_zephyr_bt_mon_uart_EXISTS      1
#define DT_CHOSEN_zephyr_code_partition          DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000
#define DT_CHOSEN_zephyr_code_partition_EXISTS   1
#define DT_CHOSEN_zephyr_flash_controller        DT_N_S_sim_flash
#define DT_CHOSEN_zephyr_flash_controller_EXISTS 1
#define DT_CHOSEN_zephyr_ieee802154              DT_N_S_ieee802154
#define DT_CHOSEN_zephyr_ieee802154_EXISTS       1
#define DT_CHOSEN_zephyr_canbus                  DT_N_S_pcie0_S_can0
#define DT_CHOSEN_zephyr_canbus_EXISTS           1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_ioapic_fec00000) fn(DT_N_S_loapic_fee00000) fn(DT_N_S_memory_0) fn(DT_N_S_soc) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart) fn(DT_N_S_soc_S_hpet_fed00000) fn(DT_N_S_soc_S_rtc_70) fn(DT_N_S_flash_500000) fn(DT_N_S_pcie0) fn(DT_N_S_pcie0_S_can0) fn(DT_N_S_pcie0_S_can0_S_can_transceiver) fn(DT_N_S_pcie0_S_eth0) fn(DT_N_S_sim_flash) fn(DT_N_S_sim_flash_S_flash_sim_0) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000) fn(DT_N_S_eeprom1) fn(DT_N_S_eeprom0) fn(DT_N_S_ieee802154)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_ioapic_fec00000) fn(DT_N_S_loapic_fee00000) fn(DT_N_S_memory_0) fn(DT_N_S_soc) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart) fn(DT_N_S_soc_S_hpet_fed00000) fn(DT_N_S_soc_S_rtc_70) fn(DT_N_S_flash_500000) fn(DT_N_S_pcie0) fn(DT_N_S_pcie0_S_can0) fn(DT_N_S_pcie0_S_can0_S_can_transceiver) fn(DT_N_S_pcie0_S_eth0) fn(DT_N_S_sim_flash) fn(DT_N_S_sim_flash_S_flash_sim_0) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000) fn(DT_N_S_eeprom1) fn(DT_N_S_eeprom0) fn(DT_N_S_ieee802154)
#define DT_FOREACH_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) fn(DT_N_S_loapic_fee00000, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, __VA_ARGS__) fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_70, __VA_ARGS__) fn(DT_N_S_flash_500000, __VA_ARGS__) fn(DT_N_S_pcie0, __VA_ARGS__) fn(DT_N_S_pcie0_S_can0, __VA_ARGS__) fn(DT_N_S_pcie0_S_can0_S_can_transceiver, __VA_ARGS__) fn(DT_N_S_pcie0_S_eth0, __VA_ARGS__) fn(DT_N_S_sim_flash, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, __VA_ARGS__) fn(DT_N_S_eeprom1, __VA_ARGS__) fn(DT_N_S_eeprom0, __VA_ARGS__) fn(DT_N_S_ieee802154, __VA_ARGS__)
#define DT_FOREACH_OKAY_VARGS_HELPER(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) fn(DT_N_S_loapic_fee00000, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, __VA_ARGS__) fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__) fn(DT_N_S_soc_S_rtc_70, __VA_ARGS__) fn(DT_N_S_flash_500000, __VA_ARGS__) fn(DT_N_S_pcie0, __VA_ARGS__) fn(DT_N_S_pcie0_S_can0, __VA_ARGS__) fn(DT_N_S_pcie0_S_can0_S_can_transceiver, __VA_ARGS__) fn(DT_N_S_pcie0_S_eth0, __VA_ARGS__) fn(DT_N_S_sim_flash, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000, __VA_ARGS__) fn(DT_N_S_eeprom1, __VA_ARGS__) fn(DT_N_S_eeprom0, __VA_ARGS__) fn(DT_N_S_ieee802154, __VA_ARGS__)
#define DT_COMPAT_fixed_partitions_LABEL_storage DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_1000
#define DT_COMPAT_fixed_partitions_LABEL_storage_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_0 DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_11000
#define DT_COMPAT_fixed_partitions_LABEL_image_0_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_image_1 DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_21000
#define DT_COMPAT_fixed_partitions_LABEL_image_1_EXISTS 1
#define DT_COMPAT_fixed_partitions_LABEL_eeprom_emu DT_N_S_sim_flash_S_flash_sim_0_S_partitions_S_partition_31000
#define DT_COMPAT_fixed_partitions_LABEL_eeprom_emu_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_qemu_x86_emulator 1
#define DT_COMPAT_HAS_OKAY_intel_x86 1
#define DT_COMPAT_HAS_OKAY_intel_ioapic 1
#define DT_COMPAT_HAS_OKAY_intel_loapic 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_ns16550 1
#define DT_COMPAT_HAS_OKAY_zephyr_bt_hci_uart 1
#define DT_COMPAT_HAS_OKAY_intel_hpet 1
#define DT_COMPAT_HAS_OKAY_motorola_mc146818 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_pcie_controller 1
#define DT_COMPAT_HAS_OKAY_kvaser_pcican 1
#define DT_COMPAT_HAS_OKAY_intel_e1000 1
#define DT_COMPAT_HAS_OKAY_zephyr_sim_flash 1
#define DT_COMPAT_HAS_OKAY_fixed_partitions 1
#define DT_COMPAT_HAS_OKAY_zephyr_emu_eeprom 1
#define DT_COMPAT_HAS_OKAY_zephyr_sim_eeprom 1
#define DT_COMPAT_HAS_OKAY_zephyr_ieee802154_uart_pipe 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_qemu_x86_emulator_NUM_OKAY 1
#define DT_N_INST_intel_x86_NUM_OKAY 1
#define DT_N_INST_intel_ioapic_NUM_OKAY 1
#define DT_N_INST_intel_loapic_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_ns16550_NUM_OKAY 2
#define DT_N_INST_zephyr_bt_hci_uart_NUM_OKAY 1
#define DT_N_INST_intel_hpet_NUM_OKAY 1
#define DT_N_INST_motorola_mc146818_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 2
#define DT_N_INST_pcie_controller_NUM_OKAY 1
#define DT_N_INST_kvaser_pcican_NUM_OKAY 1
#define DT_N_INST_intel_e1000_NUM_OKAY 1
#define DT_N_INST_zephyr_sim_flash_NUM_OKAY 1
#define DT_N_INST_fixed_partitions_NUM_OKAY 1
#define DT_N_INST_zephyr_emu_eeprom_NUM_OKAY 1
#define DT_N_INST_zephyr_sim_eeprom_NUM_OKAY 1
#define DT_N_INST_zephyr_ieee802154_uart_pipe_NUM_OKAY 1
#define DT_FOREACH_OKAY_qemu_x86_emulator(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_qemu_x86_emulator(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_qemu_x86_emulator(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_qemu_x86_emulator(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_x86(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_intel_x86(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_x86(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_x86(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_ioapic(fn) fn(DT_N_S_ioapic_fec00000)
#define DT_FOREACH_OKAY_VARGS_intel_ioapic(fn, ...) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_ioapic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_ioapic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_loapic(fn) fn(DT_N_S_loapic_fee00000)
#define DT_FOREACH_OKAY_VARGS_intel_loapic(fn, ...) fn(DT_N_S_loapic_fee00000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_loapic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_loapic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ns16550(fn) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8)
#define DT_FOREACH_OKAY_VARGS_ns16550(fn, ...) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ns16550(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_ns16550(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_bt_hci_uart(fn) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart)
#define DT_FOREACH_OKAY_VARGS_zephyr_bt_hci_uart(fn, ...) fn(DT_N_S_soc_S_uart_2f8_S_bt_hci_uart, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_bt_hci_uart(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_bt_hci_uart(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_hpet(fn) fn(DT_N_S_soc_S_hpet_fed00000)
#define DT_FOREACH_OKAY_VARGS_intel_hpet(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_hpet(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_hpet(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_motorola_mc146818(fn) fn(DT_N_S_soc_S_rtc_70)
#define DT_FOREACH_OKAY_VARGS_motorola_mc146818(fn, ...) fn(DT_N_S_soc_S_rtc_70, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_motorola_mc146818(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_motorola_mc146818(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_flash_500000) fn(DT_N_S_sim_flash_S_flash_sim_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_flash_500000, __VA_ARGS__) fn(DT_N_S_sim_flash_S_flash_sim_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_pcie_controller(fn) fn(DT_N_S_pcie0)
#define DT_FOREACH_OKAY_VARGS_pcie_controller(fn, ...) fn(DT_N_S_pcie0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_pcie_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_pcie_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_kvaser_pcican(fn) fn(DT_N_S_pcie0_S_can0)
#define DT_FOREACH_OKAY_VARGS_kvaser_pcican(fn, ...) fn(DT_N_S_pcie0_S_can0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_kvaser_pcican(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_kvaser_pcican(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_e1000(fn) fn(DT_N_S_pcie0_S_eth0)
#define DT_FOREACH_OKAY_VARGS_intel_e1000(fn, ...) fn(DT_N_S_pcie0_S_eth0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_e1000(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_e1000(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sim_flash(fn) fn(DT_N_S_sim_flash)
#define DT_FOREACH_OKAY_VARGS_zephyr_sim_flash(fn, ...) fn(DT_N_S_sim_flash, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sim_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sim_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_partitions(fn) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions)
#define DT_FOREACH_OKAY_VARGS_fixed_partitions(fn, ...) fn(DT_N_S_sim_flash_S_flash_sim_0_S_partitions, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_partitions(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_partitions(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_emu_eeprom(fn) fn(DT_N_S_eeprom1)
#define DT_FOREACH_OKAY_VARGS_zephyr_emu_eeprom(fn, ...) fn(DT_N_S_eeprom1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_emu_eeprom(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_emu_eeprom(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_sim_eeprom(fn) fn(DT_N_S_eeprom0)
#define DT_FOREACH_OKAY_VARGS_zephyr_sim_eeprom(fn, ...) fn(DT_N_S_eeprom0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_sim_eeprom(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_sim_eeprom(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_zephyr_ieee802154_uart_pipe(fn) fn(DT_N_S_ieee802154)
#define DT_FOREACH_OKAY_VARGS_zephyr_ieee802154_uart_pipe(fn, ...) fn(DT_N_S_ieee802154, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_zephyr_ieee802154_uart_pipe(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_zephyr_ieee802154_uart_pipe(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
#define DT_COMPAT_zephyr_bt_hci_uart_BUS_uart 1
#define DT_COMPAT_kvaser_pcican_BUS_pcie 1
#define DT_COMPAT_intel_e1000_BUS_pcie 1
